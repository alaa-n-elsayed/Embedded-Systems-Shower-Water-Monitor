
Shower_Water_Monitor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000350c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000142  00800060  0000350c  000035a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  008001a2  008001a2  000036e2  2**0
                  ALLOC
  3 .stab         00001fa4  00000000  00000000  000036e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ce9  00000000  00000000  00005688  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00006371  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00006531  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00006745  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00008d57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000a225  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000b530  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000b710  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000ba17  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c431  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 75 07 	jmp	0xeea	; 0xeea <__vector_1>
       8:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e0       	ldi	r30, 0x0C	; 12
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3a       	cpi	r26, 0xAD	; 173
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 14 08 	call	0x1028	; 0x1028 <main>
      8a:	0c 94 84 1a 	jmp	0x3508	; 0x3508 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6e 17 	jmp	0x2edc	; 0x2edc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e9       	ldi	r26, 0x99	; 153
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8a 17 	jmp	0x2f14	; 0x2f14 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7a 17 	jmp	0x2ef4	; 0x2ef4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 96 17 	jmp	0x2f2c	; 0x2f2c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7a 17 	jmp	0x2ef4	; 0x2ef4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 96 17 	jmp	0x2f2c	; 0x2f2c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6e 17 	jmp	0x2edc	; 0x2edc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	89 e9       	ldi	r24, 0x99	; 153
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8a 17 	jmp	0x2f14	; 0x2f14 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 e9       	ldi	r22, 0x99	; 153
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 92 17 	jmp	0x2f24	; 0x2f24 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 7a 17 	jmp	0x2ef4	; 0x2ef4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 96 17 	jmp	0x2f2c	; 0x2f2c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 7a 17 	jmp	0x2ef4	; 0x2ef4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 96 17 	jmp	0x2f2c	; 0x2f2c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 7a 17 	jmp	0x2ef4	; 0x2ef4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 96 17 	jmp	0x2f2c	; 0x2f2c <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 77 17 	jmp	0x2eee	; 0x2eee <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 93 17 	jmp	0x2f26	; 0x2f26 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 7e 17 	jmp	0x2efc	; 0x2efc <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 9a 17 	jmp	0x2f34	; 0x2f34 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 92 17 	jmp	0x2f24	; 0x2f24 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	ef 55       	subi	r30, 0x5F	; 95
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <__vector_1>:
#include "Shower_Water_Monitor.h"


/* External INT0 Interrupt Service Routine */
ISR(INT0_vect)
{
     eea:	1f 92       	push	r1
     eec:	0f 92       	push	r0
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	0f 92       	push	r0
     ef2:	11 24       	eor	r1, r1
     ef4:	8f 93       	push	r24
     ef6:	9f 93       	push	r25
     ef8:	af 93       	push	r26
     efa:	bf 93       	push	r27
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
	/* Increment the counter of the pulses */
	g_pulses++;
     f04:	80 91 a2 01 	lds	r24, 0x01A2
     f08:	90 91 a3 01 	lds	r25, 0x01A3
     f0c:	a0 91 a4 01 	lds	r26, 0x01A4
     f10:	b0 91 a5 01 	lds	r27, 0x01A5
     f14:	01 96       	adiw	r24, 0x01	; 1
     f16:	a1 1d       	adc	r26, r1
     f18:	b1 1d       	adc	r27, r1
     f1a:	80 93 a2 01 	sts	0x01A2, r24
     f1e:	90 93 a3 01 	sts	0x01A3, r25
     f22:	a0 93 a4 01 	sts	0x01A4, r26
     f26:	b0 93 a5 01 	sts	0x01A5, r27
}
     f2a:	cf 91       	pop	r28
     f2c:	df 91       	pop	r29
     f2e:	bf 91       	pop	r27
     f30:	af 91       	pop	r26
     f32:	9f 91       	pop	r25
     f34:	8f 91       	pop	r24
     f36:	0f 90       	pop	r0
     f38:	0f be       	out	0x3f, r0	; 63
     f3a:	0f 90       	pop	r0
     f3c:	1f 90       	pop	r1
     f3e:	18 95       	reti

00000f40 <INT0_Init_Sensor>:


/* External INT0 Enable and Configuration Function */
void INT0_Init_Sensor(void)
{
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
	/* Configure INT0/PD2 as Input Pin */
	GPIO_setupPinDirection(Sensor_PORT_ID, Sensor_PIN_ID, PIN_INPUT);
     f48:	83 e0       	ldi	r24, 0x03	; 3
     f4a:	62 e0       	ldi	r22, 0x02	; 2
     f4c:	40 e0       	ldi	r20, 0x00	; 0
     f4e:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <GPIO_setupPinDirection>

	/* Trigger INT0 with the Raising Edge */
	MCUCR |= ( 1 << ISC00 );
     f52:	a5 e5       	ldi	r26, 0x55	; 85
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e5 e5       	ldi	r30, 0x55	; 85
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	81 60       	ori	r24, 0x01	; 1
     f5e:	8c 93       	st	X, r24
	MCUCR |= ( 1 << ISC01 );
     f60:	a5 e5       	ldi	r26, 0x55	; 85
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e5 e5       	ldi	r30, 0x55	; 85
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	82 60       	ori	r24, 0x02	; 2
     f6c:	8c 93       	st	X, r24

	/* Enable external interrupt pin INT0 */
	GICR  |= ( 1 << INT0 );
     f6e:	ab e5       	ldi	r26, 0x5B	; 91
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	eb e5       	ldi	r30, 0x5B	; 91
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	80 64       	ori	r24, 0x40	; 64
     f7a:	8c 93       	st	X, r24
} /* End INT0_Init */
     f7c:	cf 91       	pop	r28
     f7e:	df 91       	pop	r29
     f80:	08 95       	ret

00000f82 <__vector_2>:



/* External INT1 Interrupt Service Routine */
ISR (INT1_vect)
{
     f82:	1f 92       	push	r1
     f84:	0f 92       	push	r0
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	0f 92       	push	r0
     f8a:	11 24       	eor	r1, r1
     f8c:	8f 93       	push	r24
     f8e:	9f 93       	push	r25
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
	/* If the water is running, the button should toggle the mode */
	if ( g_water_status == RUNNING )
     f98:	80 91 ac 01 	lds	r24, 0x01AC
     f9c:	81 30       	cpi	r24, 0x01	; 1
     f9e:	51 f4       	brne	.+20     	; 0xfb4 <__vector_2+0x32>
	{
		g_mode = (g_mode) ^ (1); /* Toggle the current mode */
     fa0:	90 91 aa 01 	lds	r25, 0x01AA
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	89 27       	eor	r24, r25
     fa8:	80 93 aa 01 	sts	0x01AA, r24
		g_mode_changed = 1; 	 /* Raise a flag indicate that the mode has changed */
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	80 93 ab 01 	sts	0x01AB, r24
     fb2:	10 c0       	rjmp	.+32     	; 0xfd4 <__vector_2+0x52>
	}
	else /* If the water is stopped, the button should clears the counters */
	{
		g_pulses = 0;		 /* Clear the total number of pulses */
     fb4:	10 92 a2 01 	sts	0x01A2, r1
     fb8:	10 92 a3 01 	sts	0x01A3, r1
     fbc:	10 92 a4 01 	sts	0x01A4, r1
     fc0:	10 92 a5 01 	sts	0x01A5, r1
		g_last_pulses = 0;	 /* Clear the last total number of pulses */
     fc4:	10 92 a6 01 	sts	0x01A6, r1
     fc8:	10 92 a7 01 	sts	0x01A7, r1
     fcc:	10 92 a8 01 	sts	0x01A8, r1
     fd0:	10 92 a9 01 	sts	0x01A9, r1
	}
}
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	9f 91       	pop	r25
     fda:	8f 91       	pop	r24
     fdc:	0f 90       	pop	r0
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	0f 90       	pop	r0
     fe2:	1f 90       	pop	r1
     fe4:	18 95       	reti

00000fe6 <INT1_Init_Button>:


/* External INT1 Enable and Configuration function */
void INT1_Init_Button(void)
{
     fe6:	df 93       	push	r29
     fe8:	cf 93       	push	r28
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
	/* Configure INT1/PD3 as Input Pin */
	GPIO_setupPinDirection(Button_PORT_ID, Button_PIN_ID, PIN_INPUT);
     fee:	83 e0       	ldi	r24, 0x03	; 3
     ff0:	63 e0       	ldi	r22, 0x03	; 3
     ff2:	40 e0       	ldi	r20, 0x00	; 0
     ff4:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <GPIO_setupPinDirection>

	/* Trigger INT1 with the Raising Edge */
	MCUCR |= ( 1 << ISC10 );
     ff8:	a5 e5       	ldi	r26, 0x55	; 85
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e5 e5       	ldi	r30, 0x55	; 85
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	84 60       	ori	r24, 0x04	; 4
    1004:	8c 93       	st	X, r24
	MCUCR |= ( 1 << ISC11 );
    1006:	a5 e5       	ldi	r26, 0x55	; 85
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e5 e5       	ldi	r30, 0x55	; 85
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	88 60       	ori	r24, 0x08	; 8
    1012:	8c 93       	st	X, r24

	/* Enable external interrupt pin INT1 */
	GICR  |= ( 1 << INT1 );
    1014:	ab e5       	ldi	r26, 0x5B	; 91
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	eb e5       	ldi	r30, 0x5B	; 91
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	80 68       	ori	r24, 0x80	; 128
    1020:	8c 93       	st	X, r24
} /* End INT1_Init */
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <main>:



/* function main begins program execution */
int main(void)
{
    1028:	ef 92       	push	r14
    102a:	ff 92       	push	r15
    102c:	0f 93       	push	r16
    102e:	1f 93       	push	r17
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	6a 97       	sbiw	r28, 0x1a	; 26
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	f8 94       	cli
    103e:	de bf       	out	0x3e, r29	; 62
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	cd bf       	out	0x3d, r28	; 61

	float32 volume; /* Variable to store the total volume of the water */
	float32 cost; /* Variable to store the total cost of the water */
	float32 rate; /* Variable to store the total rate of the water */

	Buzzer_Init(); /* Initialize the Buzzer */
    1044:	0e 94 ad 09 	call	0x135a	; 0x135a <Buzzer_Init>
	LCD_init(); /* Initialize the LCD */
    1048:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <LCD_init>

	SREG |= ( 1 << 7 ); /* Enable interrupts by setting I-Bit */
    104c:	af e5       	ldi	r26, 0x5F	; 95
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	ef e5       	ldi	r30, 0x5F	; 95
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	80 68       	ori	r24, 0x80	; 128
    1058:	8c 93       	st	X, r24

	INT0_Init_Sensor(); /* Enable Sensor Interrupt */
    105a:	0e 94 a0 07 	call	0xf40	; 0xf40 <INT0_Init_Sensor>
	INT1_Init_Button(); /* Enable Button Interrupt */
    105e:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <INT1_Init_Button>

	LCD_displayString("Total:       L"); /* Represent the total volume of the water */
    1062:	80 e6       	ldi	r24, 0x60	; 96
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <LCD_displayString>
	for(;;)
	{
		/********** Application Code **********/

		/* If the numbers of the screen became zero avoid overwrite */
		if(g_pulses == 0 && g_last_pulses == 0)
    106a:	80 91 a2 01 	lds	r24, 0x01A2
    106e:	90 91 a3 01 	lds	r25, 0x01A3
    1072:	a0 91 a4 01 	lds	r26, 0x01A4
    1076:	b0 91 a5 01 	lds	r27, 0x01A5
    107a:	00 97       	sbiw	r24, 0x00	; 0
    107c:	a1 05       	cpc	r26, r1
    107e:	b1 05       	cpc	r27, r1
    1080:	a1 f4       	brne	.+40     	; 0x10aa <main+0x82>
    1082:	80 91 a6 01 	lds	r24, 0x01A6
    1086:	90 91 a7 01 	lds	r25, 0x01A7
    108a:	a0 91 a8 01 	lds	r26, 0x01A8
    108e:	b0 91 a9 01 	lds	r27, 0x01A9
    1092:	00 97       	sbiw	r24, 0x00	; 0
    1094:	a1 05       	cpc	r26, r1
    1096:	b1 05       	cpc	r27, r1
    1098:	41 f4       	brne	.+16     	; 0x10aa <main+0x82>
		{
			LCD_moveCursor(0, 10);
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	6a e0       	ldi	r22, 0x0A	; 10
    109e:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <LCD_moveCursor>
			LCD_displayString("  ");
    10a2:	8f e6       	ldi	r24, 0x6F	; 111
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <LCD_displayString>
		}

		/* If the mode has changed, Update the text label */
		do
		{
			LCD_moveCursor(1, 0); /* Move the cursor to the second line */
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	60 e0       	ldi	r22, 0x00	; 0
    10ae:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <LCD_moveCursor>

			if ( g_mode == Rate_Mode ) /* If the new mode is on rate mode */
    10b2:	80 91 aa 01 	lds	r24, 0x01AA
    10b6:	81 30       	cpi	r24, 0x01	; 1
    10b8:	29 f4       	brne	.+10     	; 0x10c4 <main+0x9c>
			{
				LCD_displayString("Rate:        L/s"); 	/* Represent the flow rate of the water text label */
    10ba:	82 e7       	ldi	r24, 0x72	; 114
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <LCD_displayString>
    10c2:	04 c0       	rjmp	.+8      	; 0x10cc <main+0xa4>
			}
			else /* If the new mode is on cost mode */
			{
				LCD_displayString("Cost:        Pt."); 	/* Represent the cost of the water text label */
    10c4:	83 e8       	ldi	r24, 0x83	; 131
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <LCD_displayString>
			}

			g_mode_changed = 0; /* Reset the flag indicating that the mode has changed */
    10cc:	10 92 ab 01 	sts	0x01AB, r1
		} while( g_mode_changed == 1 );
    10d0:	80 91 ab 01 	lds	r24, 0x01AB
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	49 f3       	breq	.-46     	; 0x10aa <main+0x82>

		volume = g_pulses / 450.00; 		/* Calculate the total volume of the water */
    10d8:	80 91 a2 01 	lds	r24, 0x01A2
    10dc:	90 91 a3 01 	lds	r25, 0x01A3
    10e0:	a0 91 a4 01 	lds	r26, 0x01A4
    10e4:	b0 91 a5 01 	lds	r27, 0x01A5
    10e8:	bc 01       	movw	r22, r24
    10ea:	cd 01       	movw	r24, r26
    10ec:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    10f0:	dc 01       	movw	r26, r24
    10f2:	cb 01       	movw	r24, r22
    10f4:	bc 01       	movw	r22, r24
    10f6:	cd 01       	movw	r24, r26
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	41 ee       	ldi	r20, 0xE1	; 225
    10fe:	53 e4       	ldi	r21, 0x43	; 67
    1100:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	8f 8b       	std	Y+23, r24	; 0x17
    110a:	98 8f       	std	Y+24, r25	; 0x18
    110c:	a9 8f       	std	Y+25, r26	; 0x19
    110e:	ba 8f       	std	Y+26, r27	; 0x1a

		LCD_moveCursor( 0, 7 ); 		/* Move the cursor to the first line to represent volume */
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	67 e0       	ldi	r22, 0x07	; 7
    1114:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <LCD_moveCursor>
		LCD_FloatToString(volume); 	/* Show volume in its proper location */
    1118:	8f 89       	ldd	r24, Y+23	; 0x17
    111a:	98 8d       	ldd	r25, Y+24	; 0x18
    111c:	a9 8d       	ldd	r26, Y+25	; 0x19
    111e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1120:	bc 01       	movw	r22, r24
    1122:	cd 01       	movw	r24, r26
    1124:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <LCD_FloatToString>

		/* If the Person exceeds the average amount of water during shower ( 20 Gallons ) */
		if (volume >= 55.00 )
    1128:	6f 89       	ldd	r22, Y+23	; 0x17
    112a:	78 8d       	ldd	r23, Y+24	; 0x18
    112c:	89 8d       	ldd	r24, Y+25	; 0x19
    112e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	4c e5       	ldi	r20, 0x5C	; 92
    1136:	52 e4       	ldi	r21, 0x42	; 66
    1138:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    113c:	88 23       	and	r24, r24
    113e:	1c f0       	brlt	.+6      	; 0x1146 <main+0x11e>
		{
			Buzzer_On(); 		 /* Turn ON the buzzer to alarm him to stop the use of water */
    1140:	0e 94 b9 09 	call	0x1372	; 0x1372 <Buzzer_On>
    1144:	02 c0       	rjmp	.+4      	; 0x114a <main+0x122>
		}
		else
		{
			Buzzer_Off();		/* If not Keep the buzzer OFF */
    1146:	0e 94 c5 09 	call	0x138a	; 0x138a <Buzzer_Off>
		}

		LCD_moveCursor( 1, 7 );			/* Move the cursor to the second line to represent the other value */
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	67 e0       	ldi	r22, 0x07	; 7
    114e:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <LCD_moveCursor>

		if ( g_mode == Rate_Mode ) /* If the new mode is on rate mode */
    1152:	80 91 aa 01 	lds	r24, 0x01AA
    1156:	81 30       	cpi	r24, 0x01	; 1
    1158:	09 f0       	breq	.+2      	; 0x115c <main+0x134>
    115a:	49 c0       	rjmp	.+146    	; 0x11ee <main+0x1c6>
		{
			rate = 1000.00 * ( g_pulses - g_last_pulses ) / 450.00 / REFRESH_RATE; 			/* Calculate the flow rate of running water */
    115c:	20 91 a2 01 	lds	r18, 0x01A2
    1160:	30 91 a3 01 	lds	r19, 0x01A3
    1164:	40 91 a4 01 	lds	r20, 0x01A4
    1168:	50 91 a5 01 	lds	r21, 0x01A5
    116c:	80 91 a6 01 	lds	r24, 0x01A6
    1170:	90 91 a7 01 	lds	r25, 0x01A7
    1174:	a0 91 a8 01 	lds	r26, 0x01A8
    1178:	b0 91 a9 01 	lds	r27, 0x01A9
    117c:	79 01       	movw	r14, r18
    117e:	8a 01       	movw	r16, r20
    1180:	e8 1a       	sub	r14, r24
    1182:	f9 0a       	sbc	r15, r25
    1184:	0a 0b       	sbc	r16, r26
    1186:	1b 0b       	sbc	r17, r27
    1188:	d8 01       	movw	r26, r16
    118a:	c7 01       	movw	r24, r14
    118c:	bc 01       	movw	r22, r24
    118e:	cd 01       	movw	r24, r26
    1190:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1194:	dc 01       	movw	r26, r24
    1196:	cb 01       	movw	r24, r22
    1198:	bc 01       	movw	r22, r24
    119a:	cd 01       	movw	r24, r26
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	4a e7       	ldi	r20, 0x7A	; 122
    11a2:	54 e4       	ldi	r21, 0x44	; 68
    11a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a8:	dc 01       	movw	r26, r24
    11aa:	cb 01       	movw	r24, r22
    11ac:	bc 01       	movw	r22, r24
    11ae:	cd 01       	movw	r24, r26
    11b0:	20 e0       	ldi	r18, 0x00	; 0
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	41 ee       	ldi	r20, 0xE1	; 225
    11b6:	53 e4       	ldi	r21, 0x43	; 67
    11b8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    11bc:	dc 01       	movw	r26, r24
    11be:	cb 01       	movw	r24, r22
    11c0:	bc 01       	movw	r22, r24
    11c2:	cd 01       	movw	r24, r26
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	48 e4       	ldi	r20, 0x48	; 72
    11ca:	53 e4       	ldi	r21, 0x43	; 67
    11cc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	8f 87       	std	Y+15, r24	; 0x0f
    11d6:	98 8b       	std	Y+16, r25	; 0x10
    11d8:	a9 8b       	std	Y+17, r26	; 0x11
    11da:	ba 8b       	std	Y+18, r27	; 0x12
			LCD_FloatToString(rate);									/* Show flow rate in its proper location */
    11dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    11de:	98 89       	ldd	r25, Y+16	; 0x10
    11e0:	a9 89       	ldd	r26, Y+17	; 0x11
    11e2:	ba 89       	ldd	r27, Y+18	; 0x12
    11e4:	bc 01       	movw	r22, r24
    11e6:	cd 01       	movw	r24, r26
    11e8:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <LCD_FloatToString>
    11ec:	18 c0       	rjmp	.+48     	; 0x121e <main+0x1f6>
		}
		else /* If the new mode is on cost mode */
		{
			cost = volume * COST_PER_LITER;		/* Calculate the total cost of the water */
    11ee:	6f 89       	ldd	r22, Y+23	; 0x17
    11f0:	78 8d       	ldd	r23, Y+24	; 0x18
    11f2:	89 8d       	ldd	r24, Y+25	; 0x19
    11f4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    11f6:	22 e0       	ldi	r18, 0x02	; 2
    11f8:	3b e2       	ldi	r19, 0x2B	; 43
    11fa:	47 e8       	ldi	r20, 0x87	; 135
    11fc:	5d e3       	ldi	r21, 0x3D	; 61
    11fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1202:	dc 01       	movw	r26, r24
    1204:	cb 01       	movw	r24, r22
    1206:	8b 8b       	std	Y+19, r24	; 0x13
    1208:	9c 8b       	std	Y+20, r25	; 0x14
    120a:	ad 8b       	std	Y+21, r26	; 0x15
    120c:	be 8b       	std	Y+22, r27	; 0x16
			LCD_FloatToString(cost);			/* Show cost of the water in its proper location */
    120e:	8b 89       	ldd	r24, Y+19	; 0x13
    1210:	9c 89       	ldd	r25, Y+20	; 0x14
    1212:	ad 89       	ldd	r26, Y+21	; 0x15
    1214:	be 89       	ldd	r27, Y+22	; 0x16
    1216:	bc 01       	movw	r22, r24
    1218:	cd 01       	movw	r24, r26
    121a:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <LCD_FloatToString>
		/*
		 * Compare last total number of pulses with the current number of pulses
		 * 				-> if they are the same then the water is stopped
		 * 				-> if there is change then the water is running
		 */
		if( g_last_pulses == g_pulses )
    121e:	20 91 a6 01 	lds	r18, 0x01A6
    1222:	30 91 a7 01 	lds	r19, 0x01A7
    1226:	40 91 a8 01 	lds	r20, 0x01A8
    122a:	50 91 a9 01 	lds	r21, 0x01A9
    122e:	80 91 a2 01 	lds	r24, 0x01A2
    1232:	90 91 a3 01 	lds	r25, 0x01A3
    1236:	a0 91 a4 01 	lds	r26, 0x01A4
    123a:	b0 91 a5 01 	lds	r27, 0x01A5
    123e:	28 17       	cp	r18, r24
    1240:	39 07       	cpc	r19, r25
    1242:	4a 07       	cpc	r20, r26
    1244:	5b 07       	cpc	r21, r27
    1246:	19 f4       	brne	.+6      	; 0x124e <main+0x226>
		{
			g_water_status = STOPPED;
    1248:	10 92 ac 01 	sts	0x01AC, r1
    124c:	03 c0       	rjmp	.+6      	; 0x1254 <main+0x22c>
		}
		else
		{
			g_water_status = RUNNING;
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	80 93 ac 01 	sts	0x01AC, r24
		}

		g_last_pulses = g_pulses; /* Set the last total number of pulses to the current number of pulses */
    1254:	80 91 a2 01 	lds	r24, 0x01A2
    1258:	90 91 a3 01 	lds	r25, 0x01A3
    125c:	a0 91 a4 01 	lds	r26, 0x01A4
    1260:	b0 91 a5 01 	lds	r27, 0x01A5
    1264:	80 93 a6 01 	sts	0x01A6, r24
    1268:	90 93 a7 01 	sts	0x01A7, r25
    126c:	a0 93 a8 01 	sts	0x01A8, r26
    1270:	b0 93 a9 01 	sts	0x01A9, r27
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	a8 e4       	ldi	r26, 0x48	; 72
    127a:	b3 e4       	ldi	r27, 0x43	; 67
    127c:	8b 87       	std	Y+11, r24	; 0x0b
    127e:	9c 87       	std	Y+12, r25	; 0x0c
    1280:	ad 87       	std	Y+13, r26	; 0x0d
    1282:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1284:	6b 85       	ldd	r22, Y+11	; 0x0b
    1286:	7c 85       	ldd	r23, Y+12	; 0x0c
    1288:	8d 85       	ldd	r24, Y+13	; 0x0d
    128a:	9e 85       	ldd	r25, Y+14	; 0x0e
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	4a ef       	ldi	r20, 0xFA	; 250
    1292:	54 e4       	ldi	r21, 0x44	; 68
    1294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	8f 83       	std	Y+7, r24	; 0x07
    129e:	98 87       	std	Y+8, r25	; 0x08
    12a0:	a9 87       	std	Y+9, r26	; 0x09
    12a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12a4:	6f 81       	ldd	r22, Y+7	; 0x07
    12a6:	78 85       	ldd	r23, Y+8	; 0x08
    12a8:	89 85       	ldd	r24, Y+9	; 0x09
    12aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	40 e8       	ldi	r20, 0x80	; 128
    12b2:	5f e3       	ldi	r21, 0x3F	; 63
    12b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12b8:	88 23       	and	r24, r24
    12ba:	2c f4       	brge	.+10     	; 0x12c6 <main+0x29e>
		__ticks = 1;
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	9e 83       	std	Y+6, r25	; 0x06
    12c2:	8d 83       	std	Y+5, r24	; 0x05
    12c4:	3f c0       	rjmp	.+126    	; 0x1344 <main+0x31c>
	else if (__tmp > 65535)
    12c6:	6f 81       	ldd	r22, Y+7	; 0x07
    12c8:	78 85       	ldd	r23, Y+8	; 0x08
    12ca:	89 85       	ldd	r24, Y+9	; 0x09
    12cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	3f ef       	ldi	r19, 0xFF	; 255
    12d2:	4f e7       	ldi	r20, 0x7F	; 127
    12d4:	57 e4       	ldi	r21, 0x47	; 71
    12d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12da:	18 16       	cp	r1, r24
    12dc:	4c f5       	brge	.+82     	; 0x1330 <main+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12de:	6b 85       	ldd	r22, Y+11	; 0x0b
    12e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    12e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    12e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	40 e2       	ldi	r20, 0x20	; 32
    12ec:	51 e4       	ldi	r21, 0x41	; 65
    12ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	bc 01       	movw	r22, r24
    12f8:	cd 01       	movw	r24, r26
    12fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	9e 83       	std	Y+6, r25	; 0x06
    1304:	8d 83       	std	Y+5, r24	; 0x05
    1306:	0f c0       	rjmp	.+30     	; 0x1326 <main+0x2fe>
    1308:	88 ec       	ldi	r24, 0xC8	; 200
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	9c 83       	std	Y+4, r25	; 0x04
    130e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	9c 81       	ldd	r25, Y+4	; 0x04
    1314:	01 97       	sbiw	r24, 0x01	; 1
    1316:	f1 f7       	brne	.-4      	; 0x1314 <main+0x2ec>
    1318:	9c 83       	std	Y+4, r25	; 0x04
    131a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    131c:	8d 81       	ldd	r24, Y+5	; 0x05
    131e:	9e 81       	ldd	r25, Y+6	; 0x06
    1320:	01 97       	sbiw	r24, 0x01	; 1
    1322:	9e 83       	std	Y+6, r25	; 0x06
    1324:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1326:	8d 81       	ldd	r24, Y+5	; 0x05
    1328:	9e 81       	ldd	r25, Y+6	; 0x06
    132a:	00 97       	sbiw	r24, 0x00	; 0
    132c:	69 f7       	brne	.-38     	; 0x1308 <main+0x2e0>
    132e:	9d ce       	rjmp	.-710    	; 0x106a <main+0x42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1330:	6f 81       	ldd	r22, Y+7	; 0x07
    1332:	78 85       	ldd	r23, Y+8	; 0x08
    1334:	89 85       	ldd	r24, Y+9	; 0x09
    1336:	9a 85       	ldd	r25, Y+10	; 0x0a
    1338:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	9e 83       	std	Y+6, r25	; 0x06
    1342:	8d 83       	std	Y+5, r24	; 0x05
    1344:	8d 81       	ldd	r24, Y+5	; 0x05
    1346:	9e 81       	ldd	r25, Y+6	; 0x06
    1348:	9a 83       	std	Y+2, r25	; 0x02
    134a:	89 83       	std	Y+1, r24	; 0x01
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	9a 81       	ldd	r25, Y+2	; 0x02
    1350:	01 97       	sbiw	r24, 0x01	; 1
    1352:	f1 f7       	brne	.-4      	; 0x1350 <main+0x328>
    1354:	9a 83       	std	Y+2, r25	; 0x02
    1356:	89 83       	std	Y+1, r24	; 0x01
    1358:	88 ce       	rjmp	.-752    	; 0x106a <main+0x42>

0000135a <Buzzer_Init>:
/*
 * Description :
 * 				Initialize Buzzer by adjusting the direction of its Pin as Output
 */
void Buzzer_Init(void)
{
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    1362:	83 e0       	ldi	r24, 0x03	; 3
    1364:	66 e0       	ldi	r22, 0x06	; 6
    1366:	41 e0       	ldi	r20, 0x01	; 1
    1368:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <GPIO_setupPinDirection>
} /* End Buzzer_Init Function */
    136c:	cf 91       	pop	r28
    136e:	df 91       	pop	r29
    1370:	08 95       	ret

00001372 <Buzzer_On>:
/*
 * Description :
 * 				Turn On the Buzzer
 */
void Buzzer_On(void)
{
    1372:	df 93       	push	r29
    1374:	cf 93       	push	r28
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    137a:	83 e0       	ldi	r24, 0x03	; 3
    137c:	66 e0       	ldi	r22, 0x06	; 6
    137e:	41 e0       	ldi	r20, 0x01	; 1
    1380:	0e 94 bc 0a 	call	0x1578	; 0x1578 <GPIO_writePin>
} /* End Buzzer_On Function */
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	08 95       	ret

0000138a <Buzzer_Off>:
/*
 * Description :
 * 				Turn Off the Buzzer
 */
void Buzzer_Off(void)
{
    138a:	df 93       	push	r29
    138c:	cf 93       	push	r28
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    1392:	83 e0       	ldi	r24, 0x03	; 3
    1394:	66 e0       	ldi	r22, 0x06	; 6
    1396:	40 e0       	ldi	r20, 0x00	; 0
    1398:	0e 94 bc 0a 	call	0x1578	; 0x1578 <GPIO_writePin>
} /* End Buzzer_Off Function */
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	08 95       	ret

000013a2 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    13a2:	df 93       	push	r29
    13a4:	cf 93       	push	r28
    13a6:	00 d0       	rcall	.+0      	; 0x13a8 <GPIO_setupPinDirection+0x6>
    13a8:	00 d0       	rcall	.+0      	; 0x13aa <GPIO_setupPinDirection+0x8>
    13aa:	0f 92       	push	r0
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	89 83       	std	Y+1, r24	; 0x01
    13b2:	6a 83       	std	Y+2, r22	; 0x02
    13b4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	88 30       	cpi	r24, 0x08	; 8
    13ba:	08 f0       	brcs	.+2      	; 0x13be <GPIO_setupPinDirection+0x1c>
    13bc:	d5 c0       	rjmp	.+426    	; 0x1568 <GPIO_setupPinDirection+0x1c6>
    13be:	89 81       	ldd	r24, Y+1	; 0x01
    13c0:	84 30       	cpi	r24, 0x04	; 4
    13c2:	08 f0       	brcs	.+2      	; 0x13c6 <GPIO_setupPinDirection+0x24>
    13c4:	d1 c0       	rjmp	.+418    	; 0x1568 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	3d 83       	std	Y+5, r19	; 0x05
    13ce:	2c 83       	std	Y+4, r18	; 0x04
    13d0:	8c 81       	ldd	r24, Y+4	; 0x04
    13d2:	9d 81       	ldd	r25, Y+5	; 0x05
    13d4:	81 30       	cpi	r24, 0x01	; 1
    13d6:	91 05       	cpc	r25, r1
    13d8:	09 f4       	brne	.+2      	; 0x13dc <GPIO_setupPinDirection+0x3a>
    13da:	43 c0       	rjmp	.+134    	; 0x1462 <GPIO_setupPinDirection+0xc0>
    13dc:	2c 81       	ldd	r18, Y+4	; 0x04
    13de:	3d 81       	ldd	r19, Y+5	; 0x05
    13e0:	22 30       	cpi	r18, 0x02	; 2
    13e2:	31 05       	cpc	r19, r1
    13e4:	2c f4       	brge	.+10     	; 0x13f0 <GPIO_setupPinDirection+0x4e>
    13e6:	8c 81       	ldd	r24, Y+4	; 0x04
    13e8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ea:	00 97       	sbiw	r24, 0x00	; 0
    13ec:	71 f0       	breq	.+28     	; 0x140a <GPIO_setupPinDirection+0x68>
    13ee:	bc c0       	rjmp	.+376    	; 0x1568 <GPIO_setupPinDirection+0x1c6>
    13f0:	2c 81       	ldd	r18, Y+4	; 0x04
    13f2:	3d 81       	ldd	r19, Y+5	; 0x05
    13f4:	22 30       	cpi	r18, 0x02	; 2
    13f6:	31 05       	cpc	r19, r1
    13f8:	09 f4       	brne	.+2      	; 0x13fc <GPIO_setupPinDirection+0x5a>
    13fa:	5f c0       	rjmp	.+190    	; 0x14ba <GPIO_setupPinDirection+0x118>
    13fc:	8c 81       	ldd	r24, Y+4	; 0x04
    13fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1400:	83 30       	cpi	r24, 0x03	; 3
    1402:	91 05       	cpc	r25, r1
    1404:	09 f4       	brne	.+2      	; 0x1408 <GPIO_setupPinDirection+0x66>
    1406:	85 c0       	rjmp	.+266    	; 0x1512 <GPIO_setupPinDirection+0x170>
    1408:	af c0       	rjmp	.+350    	; 0x1568 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	81 30       	cpi	r24, 0x01	; 1
    140e:	a1 f4       	brne	.+40     	; 0x1438 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1410:	aa e3       	ldi	r26, 0x3A	; 58
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	ea e3       	ldi	r30, 0x3A	; 58
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	48 2f       	mov	r20, r24
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 2e       	mov	r0, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <GPIO_setupPinDirection+0x8c>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <GPIO_setupPinDirection+0x88>
    1432:	84 2b       	or	r24, r20
    1434:	8c 93       	st	X, r24
    1436:	98 c0       	rjmp	.+304    	; 0x1568 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1438:	aa e3       	ldi	r26, 0x3A	; 58
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	ea e3       	ldi	r30, 0x3A	; 58
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	48 2f       	mov	r20, r24
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	02 2e       	mov	r0, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <GPIO_setupPinDirection+0xb4>
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	0a 94       	dec	r0
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <GPIO_setupPinDirection+0xb0>
    145a:	80 95       	com	r24
    145c:	84 23       	and	r24, r20
    145e:	8c 93       	st	X, r24
    1460:	83 c0       	rjmp	.+262    	; 0x1568 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	81 30       	cpi	r24, 0x01	; 1
    1466:	a1 f4       	brne	.+40     	; 0x1490 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1468:	a7 e3       	ldi	r26, 0x37	; 55
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e7 e3       	ldi	r30, 0x37	; 55
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	48 2f       	mov	r20, r24
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	02 2e       	mov	r0, r18
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <GPIO_setupPinDirection+0xe4>
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	0a 94       	dec	r0
    1488:	e2 f7       	brpl	.-8      	; 0x1482 <GPIO_setupPinDirection+0xe0>
    148a:	84 2b       	or	r24, r20
    148c:	8c 93       	st	X, r24
    148e:	6c c0       	rjmp	.+216    	; 0x1568 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1490:	a7 e3       	ldi	r26, 0x37	; 55
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e7 e3       	ldi	r30, 0x37	; 55
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	48 2f       	mov	r20, r24
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	02 2e       	mov	r0, r18
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <GPIO_setupPinDirection+0x10c>
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	0a 94       	dec	r0
    14b0:	e2 f7       	brpl	.-8      	; 0x14aa <GPIO_setupPinDirection+0x108>
    14b2:	80 95       	com	r24
    14b4:	84 23       	and	r24, r20
    14b6:	8c 93       	st	X, r24
    14b8:	57 c0       	rjmp	.+174    	; 0x1568 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	81 30       	cpi	r24, 0x01	; 1
    14be:	a1 f4       	brne	.+40     	; 0x14e8 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    14c0:	a4 e3       	ldi	r26, 0x34	; 52
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e4 e3       	ldi	r30, 0x34	; 52
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	48 2f       	mov	r20, r24
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	02 2e       	mov	r0, r18
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <GPIO_setupPinDirection+0x13c>
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	0a 94       	dec	r0
    14e0:	e2 f7       	brpl	.-8      	; 0x14da <GPIO_setupPinDirection+0x138>
    14e2:	84 2b       	or	r24, r20
    14e4:	8c 93       	st	X, r24
    14e6:	40 c0       	rjmp	.+128    	; 0x1568 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    14e8:	a4 e3       	ldi	r26, 0x34	; 52
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	e4 e3       	ldi	r30, 0x34	; 52
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	48 2f       	mov	r20, r24
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	02 2e       	mov	r0, r18
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <GPIO_setupPinDirection+0x164>
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	0a 94       	dec	r0
    1508:	e2 f7       	brpl	.-8      	; 0x1502 <GPIO_setupPinDirection+0x160>
    150a:	80 95       	com	r24
    150c:	84 23       	and	r24, r20
    150e:	8c 93       	st	X, r24
    1510:	2b c0       	rjmp	.+86     	; 0x1568 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	81 30       	cpi	r24, 0x01	; 1
    1516:	a1 f4       	brne	.+40     	; 0x1540 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1518:	a1 e3       	ldi	r26, 0x31	; 49
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e1 e3       	ldi	r30, 0x31	; 49
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	48 2f       	mov	r20, r24
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	02 2e       	mov	r0, r18
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <GPIO_setupPinDirection+0x194>
    1532:	88 0f       	add	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	0a 94       	dec	r0
    1538:	e2 f7       	brpl	.-8      	; 0x1532 <GPIO_setupPinDirection+0x190>
    153a:	84 2b       	or	r24, r20
    153c:	8c 93       	st	X, r24
    153e:	14 c0       	rjmp	.+40     	; 0x1568 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1540:	a1 e3       	ldi	r26, 0x31	; 49
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	e1 e3       	ldi	r30, 0x31	; 49
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	48 2f       	mov	r20, r24
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	02 2e       	mov	r0, r18
    1558:	02 c0       	rjmp	.+4      	; 0x155e <GPIO_setupPinDirection+0x1bc>
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	0a 94       	dec	r0
    1560:	e2 f7       	brpl	.-8      	; 0x155a <GPIO_setupPinDirection+0x1b8>
    1562:	80 95       	com	r24
    1564:	84 23       	and	r24, r20
    1566:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	cf 91       	pop	r28
    1574:	df 91       	pop	r29
    1576:	08 95       	ret

00001578 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1578:	df 93       	push	r29
    157a:	cf 93       	push	r28
    157c:	00 d0       	rcall	.+0      	; 0x157e <GPIO_writePin+0x6>
    157e:	00 d0       	rcall	.+0      	; 0x1580 <GPIO_writePin+0x8>
    1580:	0f 92       	push	r0
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	89 83       	std	Y+1, r24	; 0x01
    1588:	6a 83       	std	Y+2, r22	; 0x02
    158a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	88 30       	cpi	r24, 0x08	; 8
    1590:	08 f0       	brcs	.+2      	; 0x1594 <GPIO_writePin+0x1c>
    1592:	d5 c0       	rjmp	.+426    	; 0x173e <GPIO_writePin+0x1c6>
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	84 30       	cpi	r24, 0x04	; 4
    1598:	08 f0       	brcs	.+2      	; 0x159c <GPIO_writePin+0x24>
    159a:	d1 c0       	rjmp	.+418    	; 0x173e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    159c:	89 81       	ldd	r24, Y+1	; 0x01
    159e:	28 2f       	mov	r18, r24
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	3d 83       	std	Y+5, r19	; 0x05
    15a4:	2c 83       	std	Y+4, r18	; 0x04
    15a6:	8c 81       	ldd	r24, Y+4	; 0x04
    15a8:	9d 81       	ldd	r25, Y+5	; 0x05
    15aa:	81 30       	cpi	r24, 0x01	; 1
    15ac:	91 05       	cpc	r25, r1
    15ae:	09 f4       	brne	.+2      	; 0x15b2 <GPIO_writePin+0x3a>
    15b0:	43 c0       	rjmp	.+134    	; 0x1638 <GPIO_writePin+0xc0>
    15b2:	2c 81       	ldd	r18, Y+4	; 0x04
    15b4:	3d 81       	ldd	r19, Y+5	; 0x05
    15b6:	22 30       	cpi	r18, 0x02	; 2
    15b8:	31 05       	cpc	r19, r1
    15ba:	2c f4       	brge	.+10     	; 0x15c6 <GPIO_writePin+0x4e>
    15bc:	8c 81       	ldd	r24, Y+4	; 0x04
    15be:	9d 81       	ldd	r25, Y+5	; 0x05
    15c0:	00 97       	sbiw	r24, 0x00	; 0
    15c2:	71 f0       	breq	.+28     	; 0x15e0 <GPIO_writePin+0x68>
    15c4:	bc c0       	rjmp	.+376    	; 0x173e <GPIO_writePin+0x1c6>
    15c6:	2c 81       	ldd	r18, Y+4	; 0x04
    15c8:	3d 81       	ldd	r19, Y+5	; 0x05
    15ca:	22 30       	cpi	r18, 0x02	; 2
    15cc:	31 05       	cpc	r19, r1
    15ce:	09 f4       	brne	.+2      	; 0x15d2 <GPIO_writePin+0x5a>
    15d0:	5f c0       	rjmp	.+190    	; 0x1690 <GPIO_writePin+0x118>
    15d2:	8c 81       	ldd	r24, Y+4	; 0x04
    15d4:	9d 81       	ldd	r25, Y+5	; 0x05
    15d6:	83 30       	cpi	r24, 0x03	; 3
    15d8:	91 05       	cpc	r25, r1
    15da:	09 f4       	brne	.+2      	; 0x15de <GPIO_writePin+0x66>
    15dc:	85 c0       	rjmp	.+266    	; 0x16e8 <GPIO_writePin+0x170>
    15de:	af c0       	rjmp	.+350    	; 0x173e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	81 30       	cpi	r24, 0x01	; 1
    15e4:	a1 f4       	brne	.+40     	; 0x160e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    15e6:	ab e3       	ldi	r26, 0x3B	; 59
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	eb e3       	ldi	r30, 0x3B	; 59
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	48 2f       	mov	r20, r24
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	02 2e       	mov	r0, r18
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <GPIO_writePin+0x8c>
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	0a 94       	dec	r0
    1606:	e2 f7       	brpl	.-8      	; 0x1600 <GPIO_writePin+0x88>
    1608:	84 2b       	or	r24, r20
    160a:	8c 93       	st	X, r24
    160c:	98 c0       	rjmp	.+304    	; 0x173e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    160e:	ab e3       	ldi	r26, 0x3B	; 59
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	eb e3       	ldi	r30, 0x3B	; 59
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	48 2f       	mov	r20, r24
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	02 2e       	mov	r0, r18
    1626:	02 c0       	rjmp	.+4      	; 0x162c <GPIO_writePin+0xb4>
    1628:	88 0f       	add	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	0a 94       	dec	r0
    162e:	e2 f7       	brpl	.-8      	; 0x1628 <GPIO_writePin+0xb0>
    1630:	80 95       	com	r24
    1632:	84 23       	and	r24, r20
    1634:	8c 93       	st	X, r24
    1636:	83 c0       	rjmp	.+262    	; 0x173e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1638:	8b 81       	ldd	r24, Y+3	; 0x03
    163a:	81 30       	cpi	r24, 0x01	; 1
    163c:	a1 f4       	brne	.+40     	; 0x1666 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    163e:	a8 e3       	ldi	r26, 0x38	; 56
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e8 e3       	ldi	r30, 0x38	; 56
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	48 2f       	mov	r20, r24
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	02 2e       	mov	r0, r18
    1656:	02 c0       	rjmp	.+4      	; 0x165c <GPIO_writePin+0xe4>
    1658:	88 0f       	add	r24, r24
    165a:	99 1f       	adc	r25, r25
    165c:	0a 94       	dec	r0
    165e:	e2 f7       	brpl	.-8      	; 0x1658 <GPIO_writePin+0xe0>
    1660:	84 2b       	or	r24, r20
    1662:	8c 93       	st	X, r24
    1664:	6c c0       	rjmp	.+216    	; 0x173e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1666:	a8 e3       	ldi	r26, 0x38	; 56
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e8 e3       	ldi	r30, 0x38	; 56
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	48 2f       	mov	r20, r24
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	02 2e       	mov	r0, r18
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <GPIO_writePin+0x10c>
    1680:	88 0f       	add	r24, r24
    1682:	99 1f       	adc	r25, r25
    1684:	0a 94       	dec	r0
    1686:	e2 f7       	brpl	.-8      	; 0x1680 <GPIO_writePin+0x108>
    1688:	80 95       	com	r24
    168a:	84 23       	and	r24, r20
    168c:	8c 93       	st	X, r24
    168e:	57 c0       	rjmp	.+174    	; 0x173e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	81 30       	cpi	r24, 0x01	; 1
    1694:	a1 f4       	brne	.+40     	; 0x16be <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1696:	a5 e3       	ldi	r26, 0x35	; 53
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e5 e3       	ldi	r30, 0x35	; 53
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	48 2f       	mov	r20, r24
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	02 2e       	mov	r0, r18
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <GPIO_writePin+0x13c>
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	0a 94       	dec	r0
    16b6:	e2 f7       	brpl	.-8      	; 0x16b0 <GPIO_writePin+0x138>
    16b8:	84 2b       	or	r24, r20
    16ba:	8c 93       	st	X, r24
    16bc:	40 c0       	rjmp	.+128    	; 0x173e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    16be:	a5 e3       	ldi	r26, 0x35	; 53
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e5 e3       	ldi	r30, 0x35	; 53
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	48 2f       	mov	r20, r24
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	02 2e       	mov	r0, r18
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <GPIO_writePin+0x164>
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	0a 94       	dec	r0
    16de:	e2 f7       	brpl	.-8      	; 0x16d8 <GPIO_writePin+0x160>
    16e0:	80 95       	com	r24
    16e2:	84 23       	and	r24, r20
    16e4:	8c 93       	st	X, r24
    16e6:	2b c0       	rjmp	.+86     	; 0x173e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    16e8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ea:	81 30       	cpi	r24, 0x01	; 1
    16ec:	a1 f4       	brne	.+40     	; 0x1716 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    16ee:	a2 e3       	ldi	r26, 0x32	; 50
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e2 e3       	ldi	r30, 0x32	; 50
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	48 2f       	mov	r20, r24
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	02 2e       	mov	r0, r18
    1706:	02 c0       	rjmp	.+4      	; 0x170c <GPIO_writePin+0x194>
    1708:	88 0f       	add	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	0a 94       	dec	r0
    170e:	e2 f7       	brpl	.-8      	; 0x1708 <GPIO_writePin+0x190>
    1710:	84 2b       	or	r24, r20
    1712:	8c 93       	st	X, r24
    1714:	14 c0       	rjmp	.+40     	; 0x173e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1716:	a2 e3       	ldi	r26, 0x32	; 50
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	e2 e3       	ldi	r30, 0x32	; 50
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	48 2f       	mov	r20, r24
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	02 2e       	mov	r0, r18
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <GPIO_writePin+0x1bc>
    1730:	88 0f       	add	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	0a 94       	dec	r0
    1736:	e2 f7       	brpl	.-8      	; 0x1730 <GPIO_writePin+0x1b8>
    1738:	80 95       	com	r24
    173a:	84 23       	and	r24, r20
    173c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	cf 91       	pop	r28
    174a:	df 91       	pop	r29
    174c:	08 95       	ret

0000174e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    174e:	df 93       	push	r29
    1750:	cf 93       	push	r28
    1752:	00 d0       	rcall	.+0      	; 0x1754 <GPIO_readPin+0x6>
    1754:	00 d0       	rcall	.+0      	; 0x1756 <GPIO_readPin+0x8>
    1756:	0f 92       	push	r0
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	8a 83       	std	Y+2, r24	; 0x02
    175e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1760:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	88 30       	cpi	r24, 0x08	; 8
    1766:	08 f0       	brcs	.+2      	; 0x176a <GPIO_readPin+0x1c>
    1768:	84 c0       	rjmp	.+264    	; 0x1872 <GPIO_readPin+0x124>
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	84 30       	cpi	r24, 0x04	; 4
    176e:	08 f0       	brcs	.+2      	; 0x1772 <GPIO_readPin+0x24>
    1770:	80 c0       	rjmp	.+256    	; 0x1872 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	3d 83       	std	Y+5, r19	; 0x05
    177a:	2c 83       	std	Y+4, r18	; 0x04
    177c:	4c 81       	ldd	r20, Y+4	; 0x04
    177e:	5d 81       	ldd	r21, Y+5	; 0x05
    1780:	41 30       	cpi	r20, 0x01	; 1
    1782:	51 05       	cpc	r21, r1
    1784:	79 f1       	breq	.+94     	; 0x17e4 <GPIO_readPin+0x96>
    1786:	8c 81       	ldd	r24, Y+4	; 0x04
    1788:	9d 81       	ldd	r25, Y+5	; 0x05
    178a:	82 30       	cpi	r24, 0x02	; 2
    178c:	91 05       	cpc	r25, r1
    178e:	34 f4       	brge	.+12     	; 0x179c <GPIO_readPin+0x4e>
    1790:	2c 81       	ldd	r18, Y+4	; 0x04
    1792:	3d 81       	ldd	r19, Y+5	; 0x05
    1794:	21 15       	cp	r18, r1
    1796:	31 05       	cpc	r19, r1
    1798:	69 f0       	breq	.+26     	; 0x17b4 <GPIO_readPin+0x66>
    179a:	6b c0       	rjmp	.+214    	; 0x1872 <GPIO_readPin+0x124>
    179c:	4c 81       	ldd	r20, Y+4	; 0x04
    179e:	5d 81       	ldd	r21, Y+5	; 0x05
    17a0:	42 30       	cpi	r20, 0x02	; 2
    17a2:	51 05       	cpc	r21, r1
    17a4:	b9 f1       	breq	.+110    	; 0x1814 <GPIO_readPin+0xc6>
    17a6:	8c 81       	ldd	r24, Y+4	; 0x04
    17a8:	9d 81       	ldd	r25, Y+5	; 0x05
    17aa:	83 30       	cpi	r24, 0x03	; 3
    17ac:	91 05       	cpc	r25, r1
    17ae:	09 f4       	brne	.+2      	; 0x17b2 <GPIO_readPin+0x64>
    17b0:	49 c0       	rjmp	.+146    	; 0x1844 <GPIO_readPin+0xf6>
    17b2:	5f c0       	rjmp	.+190    	; 0x1872 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    17b4:	e9 e3       	ldi	r30, 0x39	; 57
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	28 2f       	mov	r18, r24
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	88 2f       	mov	r24, r24
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	a9 01       	movw	r20, r18
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <GPIO_readPin+0x7e>
    17c8:	55 95       	asr	r21
    17ca:	47 95       	ror	r20
    17cc:	8a 95       	dec	r24
    17ce:	e2 f7       	brpl	.-8      	; 0x17c8 <GPIO_readPin+0x7a>
    17d0:	ca 01       	movw	r24, r20
    17d2:	81 70       	andi	r24, 0x01	; 1
    17d4:	90 70       	andi	r25, 0x00	; 0
    17d6:	88 23       	and	r24, r24
    17d8:	19 f0       	breq	.+6      	; 0x17e0 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	89 83       	std	Y+1, r24	; 0x01
    17de:	49 c0       	rjmp	.+146    	; 0x1872 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17e0:	19 82       	std	Y+1, r1	; 0x01
    17e2:	47 c0       	rjmp	.+142    	; 0x1872 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    17e4:	e6 e3       	ldi	r30, 0x36	; 54
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	88 2f       	mov	r24, r24
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	a9 01       	movw	r20, r18
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <GPIO_readPin+0xae>
    17f8:	55 95       	asr	r21
    17fa:	47 95       	ror	r20
    17fc:	8a 95       	dec	r24
    17fe:	e2 f7       	brpl	.-8      	; 0x17f8 <GPIO_readPin+0xaa>
    1800:	ca 01       	movw	r24, r20
    1802:	81 70       	andi	r24, 0x01	; 1
    1804:	90 70       	andi	r25, 0x00	; 0
    1806:	88 23       	and	r24, r24
    1808:	19 f0       	breq	.+6      	; 0x1810 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	89 83       	std	Y+1, r24	; 0x01
    180e:	31 c0       	rjmp	.+98     	; 0x1872 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1810:	19 82       	std	Y+1, r1	; 0x01
    1812:	2f c0       	rjmp	.+94     	; 0x1872 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1814:	e3 e3       	ldi	r30, 0x33	; 51
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	28 2f       	mov	r18, r24
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	88 2f       	mov	r24, r24
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	a9 01       	movw	r20, r18
    1826:	02 c0       	rjmp	.+4      	; 0x182c <GPIO_readPin+0xde>
    1828:	55 95       	asr	r21
    182a:	47 95       	ror	r20
    182c:	8a 95       	dec	r24
    182e:	e2 f7       	brpl	.-8      	; 0x1828 <GPIO_readPin+0xda>
    1830:	ca 01       	movw	r24, r20
    1832:	81 70       	andi	r24, 0x01	; 1
    1834:	90 70       	andi	r25, 0x00	; 0
    1836:	88 23       	and	r24, r24
    1838:	19 f0       	breq	.+6      	; 0x1840 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	89 83       	std	Y+1, r24	; 0x01
    183e:	19 c0       	rjmp	.+50     	; 0x1872 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1840:	19 82       	std	Y+1, r1	; 0x01
    1842:	17 c0       	rjmp	.+46     	; 0x1872 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1844:	e0 e3       	ldi	r30, 0x30	; 48
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	28 2f       	mov	r18, r24
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	8b 81       	ldd	r24, Y+3	; 0x03
    1850:	88 2f       	mov	r24, r24
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	a9 01       	movw	r20, r18
    1856:	02 c0       	rjmp	.+4      	; 0x185c <GPIO_readPin+0x10e>
    1858:	55 95       	asr	r21
    185a:	47 95       	ror	r20
    185c:	8a 95       	dec	r24
    185e:	e2 f7       	brpl	.-8      	; 0x1858 <GPIO_readPin+0x10a>
    1860:	ca 01       	movw	r24, r20
    1862:	81 70       	andi	r24, 0x01	; 1
    1864:	90 70       	andi	r25, 0x00	; 0
    1866:	88 23       	and	r24, r24
    1868:	19 f0       	breq	.+6      	; 0x1870 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	89 83       	std	Y+1, r24	; 0x01
    186e:	01 c0       	rjmp	.+2      	; 0x1872 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1870:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1872:	89 81       	ldd	r24, Y+1	; 0x01
}
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	08 95       	ret

00001884 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	00 d0       	rcall	.+0      	; 0x188a <GPIO_setupPortDirection+0x6>
    188a:	00 d0       	rcall	.+0      	; 0x188c <GPIO_setupPortDirection+0x8>
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
    1890:	89 83       	std	Y+1, r24	; 0x01
    1892:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	84 30       	cpi	r24, 0x04	; 4
    1898:	90 f5       	brcc	.+100    	; 0x18fe <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	3c 83       	std	Y+4, r19	; 0x04
    18a2:	2b 83       	std	Y+3, r18	; 0x03
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	9c 81       	ldd	r25, Y+4	; 0x04
    18a8:	81 30       	cpi	r24, 0x01	; 1
    18aa:	91 05       	cpc	r25, r1
    18ac:	d1 f0       	breq	.+52     	; 0x18e2 <GPIO_setupPortDirection+0x5e>
    18ae:	2b 81       	ldd	r18, Y+3	; 0x03
    18b0:	3c 81       	ldd	r19, Y+4	; 0x04
    18b2:	22 30       	cpi	r18, 0x02	; 2
    18b4:	31 05       	cpc	r19, r1
    18b6:	2c f4       	brge	.+10     	; 0x18c2 <GPIO_setupPortDirection+0x3e>
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	9c 81       	ldd	r25, Y+4	; 0x04
    18bc:	00 97       	sbiw	r24, 0x00	; 0
    18be:	61 f0       	breq	.+24     	; 0x18d8 <GPIO_setupPortDirection+0x54>
    18c0:	1e c0       	rjmp	.+60     	; 0x18fe <GPIO_setupPortDirection+0x7a>
    18c2:	2b 81       	ldd	r18, Y+3	; 0x03
    18c4:	3c 81       	ldd	r19, Y+4	; 0x04
    18c6:	22 30       	cpi	r18, 0x02	; 2
    18c8:	31 05       	cpc	r19, r1
    18ca:	81 f0       	breq	.+32     	; 0x18ec <GPIO_setupPortDirection+0x68>
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	9c 81       	ldd	r25, Y+4	; 0x04
    18d0:	83 30       	cpi	r24, 0x03	; 3
    18d2:	91 05       	cpc	r25, r1
    18d4:	81 f0       	breq	.+32     	; 0x18f6 <GPIO_setupPortDirection+0x72>
    18d6:	13 c0       	rjmp	.+38     	; 0x18fe <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    18d8:	ea e3       	ldi	r30, 0x3A	; 58
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	80 83       	st	Z, r24
    18e0:	0e c0       	rjmp	.+28     	; 0x18fe <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    18e2:	e7 e3       	ldi	r30, 0x37	; 55
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	8a 81       	ldd	r24, Y+2	; 0x02
    18e8:	80 83       	st	Z, r24
    18ea:	09 c0       	rjmp	.+18     	; 0x18fe <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    18ec:	e4 e3       	ldi	r30, 0x34	; 52
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	8a 81       	ldd	r24, Y+2	; 0x02
    18f2:	80 83       	st	Z, r24
    18f4:	04 c0       	rjmp	.+8      	; 0x18fe <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    18f6:	e1 e3       	ldi	r30, 0x31	; 49
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	8a 81       	ldd	r24, Y+2	; 0x02
    18fc:	80 83       	st	Z, r24
			break;
		}
	}
}
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	cf 91       	pop	r28
    1908:	df 91       	pop	r29
    190a:	08 95       	ret

0000190c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    190c:	df 93       	push	r29
    190e:	cf 93       	push	r28
    1910:	00 d0       	rcall	.+0      	; 0x1912 <GPIO_writePort+0x6>
    1912:	00 d0       	rcall	.+0      	; 0x1914 <GPIO_writePort+0x8>
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
    1918:	89 83       	std	Y+1, r24	; 0x01
    191a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	84 30       	cpi	r24, 0x04	; 4
    1920:	90 f5       	brcc	.+100    	; 0x1986 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	28 2f       	mov	r18, r24
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	3c 83       	std	Y+4, r19	; 0x04
    192a:	2b 83       	std	Y+3, r18	; 0x03
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	9c 81       	ldd	r25, Y+4	; 0x04
    1930:	81 30       	cpi	r24, 0x01	; 1
    1932:	91 05       	cpc	r25, r1
    1934:	d1 f0       	breq	.+52     	; 0x196a <GPIO_writePort+0x5e>
    1936:	2b 81       	ldd	r18, Y+3	; 0x03
    1938:	3c 81       	ldd	r19, Y+4	; 0x04
    193a:	22 30       	cpi	r18, 0x02	; 2
    193c:	31 05       	cpc	r19, r1
    193e:	2c f4       	brge	.+10     	; 0x194a <GPIO_writePort+0x3e>
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	9c 81       	ldd	r25, Y+4	; 0x04
    1944:	00 97       	sbiw	r24, 0x00	; 0
    1946:	61 f0       	breq	.+24     	; 0x1960 <GPIO_writePort+0x54>
    1948:	1e c0       	rjmp	.+60     	; 0x1986 <GPIO_writePort+0x7a>
    194a:	2b 81       	ldd	r18, Y+3	; 0x03
    194c:	3c 81       	ldd	r19, Y+4	; 0x04
    194e:	22 30       	cpi	r18, 0x02	; 2
    1950:	31 05       	cpc	r19, r1
    1952:	81 f0       	breq	.+32     	; 0x1974 <GPIO_writePort+0x68>
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	9c 81       	ldd	r25, Y+4	; 0x04
    1958:	83 30       	cpi	r24, 0x03	; 3
    195a:	91 05       	cpc	r25, r1
    195c:	81 f0       	breq	.+32     	; 0x197e <GPIO_writePort+0x72>
    195e:	13 c0       	rjmp	.+38     	; 0x1986 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1960:	eb e3       	ldi	r30, 0x3B	; 59
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	80 83       	st	Z, r24
    1968:	0e c0       	rjmp	.+28     	; 0x1986 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    196a:	e8 e3       	ldi	r30, 0x38	; 56
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	8a 81       	ldd	r24, Y+2	; 0x02
    1970:	80 83       	st	Z, r24
    1972:	09 c0       	rjmp	.+18     	; 0x1986 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1974:	e5 e3       	ldi	r30, 0x35	; 53
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	8a 81       	ldd	r24, Y+2	; 0x02
    197a:	80 83       	st	Z, r24
    197c:	04 c0       	rjmp	.+8      	; 0x1986 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    197e:	e2 e3       	ldi	r30, 0x32	; 50
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	8a 81       	ldd	r24, Y+2	; 0x02
    1984:	80 83       	st	Z, r24
			break;
		}
	}
}
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	cf 91       	pop	r28
    1990:	df 91       	pop	r29
    1992:	08 95       	ret

00001994 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1994:	df 93       	push	r29
    1996:	cf 93       	push	r28
    1998:	00 d0       	rcall	.+0      	; 0x199a <GPIO_readPort+0x6>
    199a:	00 d0       	rcall	.+0      	; 0x199c <GPIO_readPort+0x8>
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    19a2:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19a4:	8a 81       	ldd	r24, Y+2	; 0x02
    19a6:	84 30       	cpi	r24, 0x04	; 4
    19a8:	90 f5       	brcc	.+100    	; 0x1a0e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	28 2f       	mov	r18, r24
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	3c 83       	std	Y+4, r19	; 0x04
    19b2:	2b 83       	std	Y+3, r18	; 0x03
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	9c 81       	ldd	r25, Y+4	; 0x04
    19b8:	81 30       	cpi	r24, 0x01	; 1
    19ba:	91 05       	cpc	r25, r1
    19bc:	d1 f0       	breq	.+52     	; 0x19f2 <GPIO_readPort+0x5e>
    19be:	2b 81       	ldd	r18, Y+3	; 0x03
    19c0:	3c 81       	ldd	r19, Y+4	; 0x04
    19c2:	22 30       	cpi	r18, 0x02	; 2
    19c4:	31 05       	cpc	r19, r1
    19c6:	2c f4       	brge	.+10     	; 0x19d2 <GPIO_readPort+0x3e>
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	9c 81       	ldd	r25, Y+4	; 0x04
    19cc:	00 97       	sbiw	r24, 0x00	; 0
    19ce:	61 f0       	breq	.+24     	; 0x19e8 <GPIO_readPort+0x54>
    19d0:	1e c0       	rjmp	.+60     	; 0x1a0e <GPIO_readPort+0x7a>
    19d2:	2b 81       	ldd	r18, Y+3	; 0x03
    19d4:	3c 81       	ldd	r19, Y+4	; 0x04
    19d6:	22 30       	cpi	r18, 0x02	; 2
    19d8:	31 05       	cpc	r19, r1
    19da:	81 f0       	breq	.+32     	; 0x19fc <GPIO_readPort+0x68>
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	9c 81       	ldd	r25, Y+4	; 0x04
    19e0:	83 30       	cpi	r24, 0x03	; 3
    19e2:	91 05       	cpc	r25, r1
    19e4:	81 f0       	breq	.+32     	; 0x1a06 <GPIO_readPort+0x72>
    19e6:	13 c0       	rjmp	.+38     	; 0x1a0e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    19e8:	e9 e3       	ldi	r30, 0x39	; 57
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	89 83       	std	Y+1, r24	; 0x01
    19f0:	0e c0       	rjmp	.+28     	; 0x1a0e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    19f2:	e6 e3       	ldi	r30, 0x36	; 54
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	89 83       	std	Y+1, r24	; 0x01
    19fa:	09 c0       	rjmp	.+18     	; 0x1a0e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    19fc:	e3 e3       	ldi	r30, 0x33	; 51
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	89 83       	std	Y+1, r24	; 0x01
    1a04:	04 c0       	rjmp	.+8      	; 0x1a0e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1a06:	e0 e3       	ldi	r30, 0x30	; 48
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1a0e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	0f 90       	pop	r0
    1a18:	cf 91       	pop	r28
    1a1a:	df 91       	pop	r29
    1a1c:	08 95       	ret

00001a1e <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1a1e:	df 93       	push	r29
    1a20:	cf 93       	push	r28
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	67 e0       	ldi	r22, 0x07	; 7
    1a2a:	41 e0       	ldi	r20, 0x01	; 1
    1a2c:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	66 e0       	ldi	r22, 0x06	; 6
    1a34:	41 e0       	ldi	r20, 0x01	; 1
    1a36:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	65 e0       	ldi	r22, 0x05	; 5
    1a3e:	41 e0       	ldi	r20, 0x01	; 1
    1a40:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <GPIO_setupPinDirection>

#if (LCD_DATA_BITS_MODE == 4)

	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID,PIN_OUTPUT);
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	60 e0       	ldi	r22, 0x00	; 0
    1a48:	41 e0       	ldi	r20, 0x01	; 1
    1a4a:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+1,PIN_OUTPUT);
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	61 e0       	ldi	r22, 0x01	; 1
    1a52:	41 e0       	ldi	r20, 0x01	; 1
    1a54:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+2,PIN_OUTPUT);
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	62 e0       	ldi	r22, 0x02	; 2
    1a5c:	41 e0       	ldi	r20, 0x01	; 1
    1a5e:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+3,PIN_OUTPUT);
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	63 e0       	ldi	r22, 0x03	; 3
    1a66:	41 e0       	ldi	r20, 0x01	; 1
    1a68:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <GPIO_setupPinDirection>

	LCD_sendCommand(LCD_GO_TO_HOME);
    1a6c:	82 e0       	ldi	r24, 0x02	; 2
    1a6e:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    1a72:	88 e2       	ldi	r24, 0x28	; 40
    1a74:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <LCD_sendCommand>
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1a78:	8c e0       	ldi	r24, 0x0C	; 12
    1a7a:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <LCD_sendCommand>
}
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	08 95       	ret

00001a8a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1a8a:	0f 93       	push	r16
    1a8c:	1f 93       	push	r17
    1a8e:	df 93       	push	r29
    1a90:	cf 93       	push	r28
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
    1a96:	c4 56       	subi	r28, 0x64	; 100
    1a98:	d0 40       	sbci	r29, 0x00	; 0
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	de bf       	out	0x3e, r29	; 62
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	fe 01       	movw	r30, r28
    1aa6:	ec 59       	subi	r30, 0x9C	; 156
    1aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aaa:	80 83       	st	Z, r24
	uint8 lcd_port_value = 0;
    1aac:	fe 01       	movw	r30, r28
    1aae:	ed 59       	subi	r30, 0x9D	; 157
    1ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab2:	10 82       	st	Z, r1
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	67 e0       	ldi	r22, 0x07	; 7
    1ab8:	40 e0       	ldi	r20, 0x00	; 0
    1aba:	0e 94 bc 0a 	call	0x1578	; 0x1578 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	66 e0       	ldi	r22, 0x06	; 6
    1ac2:	40 e0       	ldi	r20, 0x00	; 0
    1ac4:	0e 94 bc 0a 	call	0x1578	; 0x1578 <GPIO_writePin>
    1ac8:	fe 01       	movw	r30, r28
    1aca:	e1 5a       	subi	r30, 0xA1	; 161
    1acc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	a0 e8       	ldi	r26, 0x80	; 128
    1ad4:	bf e3       	ldi	r27, 0x3F	; 63
    1ad6:	80 83       	st	Z, r24
    1ad8:	91 83       	std	Z+1, r25	; 0x01
    1ada:	a2 83       	std	Z+2, r26	; 0x02
    1adc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ade:	8e 01       	movw	r16, r28
    1ae0:	05 5a       	subi	r16, 0xA5	; 165
    1ae2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	e1 5a       	subi	r30, 0xA1	; 161
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	60 81       	ld	r22, Z
    1aec:	71 81       	ldd	r23, Z+1	; 0x01
    1aee:	82 81       	ldd	r24, Z+2	; 0x02
    1af0:	93 81       	ldd	r25, Z+3	; 0x03
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	4a e7       	ldi	r20, 0x7A	; 122
    1af8:	53 e4       	ldi	r21, 0x43	; 67
    1afa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	f8 01       	movw	r30, r16
    1b04:	80 83       	st	Z, r24
    1b06:	91 83       	std	Z+1, r25	; 0x01
    1b08:	a2 83       	std	Z+2, r26	; 0x02
    1b0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b0c:	fe 01       	movw	r30, r28
    1b0e:	e5 5a       	subi	r30, 0xA5	; 165
    1b10:	ff 4f       	sbci	r31, 0xFF	; 255
    1b12:	60 81       	ld	r22, Z
    1b14:	71 81       	ldd	r23, Z+1	; 0x01
    1b16:	82 81       	ldd	r24, Z+2	; 0x02
    1b18:	93 81       	ldd	r25, Z+3	; 0x03
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	40 e8       	ldi	r20, 0x80	; 128
    1b20:	5f e3       	ldi	r21, 0x3F	; 63
    1b22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b26:	88 23       	and	r24, r24
    1b28:	44 f4       	brge	.+16     	; 0x1b3a <LCD_sendCommand+0xb0>
		__ticks = 1;
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	e7 5a       	subi	r30, 0xA7	; 167
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	91 83       	std	Z+1, r25	; 0x01
    1b36:	80 83       	st	Z, r24
    1b38:	64 c0       	rjmp	.+200    	; 0x1c02 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	e5 5a       	subi	r30, 0xA5	; 165
    1b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b40:	60 81       	ld	r22, Z
    1b42:	71 81       	ldd	r23, Z+1	; 0x01
    1b44:	82 81       	ldd	r24, Z+2	; 0x02
    1b46:	93 81       	ldd	r25, Z+3	; 0x03
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	3f ef       	ldi	r19, 0xFF	; 255
    1b4c:	4f e7       	ldi	r20, 0x7F	; 127
    1b4e:	57 e4       	ldi	r21, 0x47	; 71
    1b50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b54:	18 16       	cp	r1, r24
    1b56:	0c f0       	brlt	.+2      	; 0x1b5a <LCD_sendCommand+0xd0>
    1b58:	43 c0       	rjmp	.+134    	; 0x1be0 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b5a:	fe 01       	movw	r30, r28
    1b5c:	e1 5a       	subi	r30, 0xA1	; 161
    1b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b60:	60 81       	ld	r22, Z
    1b62:	71 81       	ldd	r23, Z+1	; 0x01
    1b64:	82 81       	ldd	r24, Z+2	; 0x02
    1b66:	93 81       	ldd	r25, Z+3	; 0x03
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	40 e2       	ldi	r20, 0x20	; 32
    1b6e:	51 e4       	ldi	r21, 0x41	; 65
    1b70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	8e 01       	movw	r16, r28
    1b7a:	07 5a       	subi	r16, 0xA7	; 167
    1b7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7e:	bc 01       	movw	r22, r24
    1b80:	cd 01       	movw	r24, r26
    1b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	f8 01       	movw	r30, r16
    1b8c:	91 83       	std	Z+1, r25	; 0x01
    1b8e:	80 83       	st	Z, r24
    1b90:	1f c0       	rjmp	.+62     	; 0x1bd0 <LCD_sendCommand+0x146>
    1b92:	fe 01       	movw	r30, r28
    1b94:	e9 5a       	subi	r30, 0xA9	; 169
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	89 e1       	ldi	r24, 0x19	; 25
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	91 83       	std	Z+1, r25	; 0x01
    1b9e:	80 83       	st	Z, r24
    1ba0:	fe 01       	movw	r30, r28
    1ba2:	e9 5a       	subi	r30, 0xA9	; 169
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	80 81       	ld	r24, Z
    1ba8:	91 81       	ldd	r25, Z+1	; 0x01
    1baa:	01 97       	sbiw	r24, 0x01	; 1
    1bac:	f1 f7       	brne	.-4      	; 0x1baa <LCD_sendCommand+0x120>
    1bae:	fe 01       	movw	r30, r28
    1bb0:	e9 5a       	subi	r30, 0xA9	; 169
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	91 83       	std	Z+1, r25	; 0x01
    1bb6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb8:	de 01       	movw	r26, r28
    1bba:	a7 5a       	subi	r26, 0xA7	; 167
    1bbc:	bf 4f       	sbci	r27, 0xFF	; 255
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	e7 5a       	subi	r30, 0xA7	; 167
    1bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc4:	80 81       	ld	r24, Z
    1bc6:	91 81       	ldd	r25, Z+1	; 0x01
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	11 96       	adiw	r26, 0x01	; 1
    1bcc:	9c 93       	st	X, r25
    1bce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd0:	fe 01       	movw	r30, r28
    1bd2:	e7 5a       	subi	r30, 0xA7	; 167
    1bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd6:	80 81       	ld	r24, Z
    1bd8:	91 81       	ldd	r25, Z+1	; 0x01
    1bda:	00 97       	sbiw	r24, 0x00	; 0
    1bdc:	d1 f6       	brne	.-76     	; 0x1b92 <LCD_sendCommand+0x108>
    1bde:	27 c0       	rjmp	.+78     	; 0x1c2e <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be0:	8e 01       	movw	r16, r28
    1be2:	07 5a       	subi	r16, 0xA7	; 167
    1be4:	1f 4f       	sbci	r17, 0xFF	; 255
    1be6:	fe 01       	movw	r30, r28
    1be8:	e5 5a       	subi	r30, 0xA5	; 165
    1bea:	ff 4f       	sbci	r31, 0xFF	; 255
    1bec:	60 81       	ld	r22, Z
    1bee:	71 81       	ldd	r23, Z+1	; 0x01
    1bf0:	82 81       	ldd	r24, Z+2	; 0x02
    1bf2:	93 81       	ldd	r25, Z+3	; 0x03
    1bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	f8 01       	movw	r30, r16
    1bfe:	91 83       	std	Z+1, r25	; 0x01
    1c00:	80 83       	st	Z, r24
    1c02:	de 01       	movw	r26, r28
    1c04:	ab 5a       	subi	r26, 0xAB	; 171
    1c06:	bf 4f       	sbci	r27, 0xFF	; 255
    1c08:	fe 01       	movw	r30, r28
    1c0a:	e7 5a       	subi	r30, 0xA7	; 167
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	80 81       	ld	r24, Z
    1c10:	91 81       	ldd	r25, Z+1	; 0x01
    1c12:	8d 93       	st	X+, r24
    1c14:	9c 93       	st	X, r25
    1c16:	fe 01       	movw	r30, r28
    1c18:	eb 5a       	subi	r30, 0xAB	; 171
    1c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1c:	80 81       	ld	r24, Z
    1c1e:	91 81       	ldd	r25, Z+1	; 0x01
    1c20:	01 97       	sbiw	r24, 0x01	; 1
    1c22:	f1 f7       	brne	.-4      	; 0x1c20 <LCD_sendCommand+0x196>
    1c24:	fe 01       	movw	r30, r28
    1c26:	eb 5a       	subi	r30, 0xAB	; 171
    1c28:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2a:	91 83       	std	Z+1, r25	; 0x01
    1c2c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	65 e0       	ldi	r22, 0x05	; 5
    1c32:	41 e0       	ldi	r20, 0x01	; 1
    1c34:	0e 94 bc 0a 	call	0x1578	; 0x1578 <GPIO_writePin>
    1c38:	fe 01       	movw	r30, r28
    1c3a:	ef 5a       	subi	r30, 0xAF	; 175
    1c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	a0 e8       	ldi	r26, 0x80	; 128
    1c44:	bf e3       	ldi	r27, 0x3F	; 63
    1c46:	80 83       	st	Z, r24
    1c48:	91 83       	std	Z+1, r25	; 0x01
    1c4a:	a2 83       	std	Z+2, r26	; 0x02
    1c4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c4e:	8e 01       	movw	r16, r28
    1c50:	03 5b       	subi	r16, 0xB3	; 179
    1c52:	1f 4f       	sbci	r17, 0xFF	; 255
    1c54:	fe 01       	movw	r30, r28
    1c56:	ef 5a       	subi	r30, 0xAF	; 175
    1c58:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5a:	60 81       	ld	r22, Z
    1c5c:	71 81       	ldd	r23, Z+1	; 0x01
    1c5e:	82 81       	ldd	r24, Z+2	; 0x02
    1c60:	93 81       	ldd	r25, Z+3	; 0x03
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	4a e7       	ldi	r20, 0x7A	; 122
    1c68:	53 e4       	ldi	r21, 0x43	; 67
    1c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	f8 01       	movw	r30, r16
    1c74:	80 83       	st	Z, r24
    1c76:	91 83       	std	Z+1, r25	; 0x01
    1c78:	a2 83       	std	Z+2, r26	; 0x02
    1c7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c7c:	fe 01       	movw	r30, r28
    1c7e:	e3 5b       	subi	r30, 0xB3	; 179
    1c80:	ff 4f       	sbci	r31, 0xFF	; 255
    1c82:	60 81       	ld	r22, Z
    1c84:	71 81       	ldd	r23, Z+1	; 0x01
    1c86:	82 81       	ldd	r24, Z+2	; 0x02
    1c88:	93 81       	ldd	r25, Z+3	; 0x03
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	40 e8       	ldi	r20, 0x80	; 128
    1c90:	5f e3       	ldi	r21, 0x3F	; 63
    1c92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c96:	88 23       	and	r24, r24
    1c98:	44 f4       	brge	.+16     	; 0x1caa <LCD_sendCommand+0x220>
		__ticks = 1;
    1c9a:	fe 01       	movw	r30, r28
    1c9c:	e5 5b       	subi	r30, 0xB5	; 181
    1c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	91 83       	std	Z+1, r25	; 0x01
    1ca6:	80 83       	st	Z, r24
    1ca8:	64 c0       	rjmp	.+200    	; 0x1d72 <LCD_sendCommand+0x2e8>
	else if (__tmp > 65535)
    1caa:	fe 01       	movw	r30, r28
    1cac:	e3 5b       	subi	r30, 0xB3	; 179
    1cae:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb0:	60 81       	ld	r22, Z
    1cb2:	71 81       	ldd	r23, Z+1	; 0x01
    1cb4:	82 81       	ldd	r24, Z+2	; 0x02
    1cb6:	93 81       	ldd	r25, Z+3	; 0x03
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	3f ef       	ldi	r19, 0xFF	; 255
    1cbc:	4f e7       	ldi	r20, 0x7F	; 127
    1cbe:	57 e4       	ldi	r21, 0x47	; 71
    1cc0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cc4:	18 16       	cp	r1, r24
    1cc6:	0c f0       	brlt	.+2      	; 0x1cca <LCD_sendCommand+0x240>
    1cc8:	43 c0       	rjmp	.+134    	; 0x1d50 <LCD_sendCommand+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cca:	fe 01       	movw	r30, r28
    1ccc:	ef 5a       	subi	r30, 0xAF	; 175
    1cce:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd0:	60 81       	ld	r22, Z
    1cd2:	71 81       	ldd	r23, Z+1	; 0x01
    1cd4:	82 81       	ldd	r24, Z+2	; 0x02
    1cd6:	93 81       	ldd	r25, Z+3	; 0x03
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	40 e2       	ldi	r20, 0x20	; 32
    1cde:	51 e4       	ldi	r21, 0x41	; 65
    1ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	8e 01       	movw	r16, r28
    1cea:	05 5b       	subi	r16, 0xB5	; 181
    1cec:	1f 4f       	sbci	r17, 0xFF	; 255
    1cee:	bc 01       	movw	r22, r24
    1cf0:	cd 01       	movw	r24, r26
    1cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	f8 01       	movw	r30, r16
    1cfc:	91 83       	std	Z+1, r25	; 0x01
    1cfe:	80 83       	st	Z, r24
    1d00:	1f c0       	rjmp	.+62     	; 0x1d40 <LCD_sendCommand+0x2b6>
    1d02:	fe 01       	movw	r30, r28
    1d04:	e7 5b       	subi	r30, 0xB7	; 183
    1d06:	ff 4f       	sbci	r31, 0xFF	; 255
    1d08:	89 e1       	ldi	r24, 0x19	; 25
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	91 83       	std	Z+1, r25	; 0x01
    1d0e:	80 83       	st	Z, r24
    1d10:	fe 01       	movw	r30, r28
    1d12:	e7 5b       	subi	r30, 0xB7	; 183
    1d14:	ff 4f       	sbci	r31, 0xFF	; 255
    1d16:	80 81       	ld	r24, Z
    1d18:	91 81       	ldd	r25, Z+1	; 0x01
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	f1 f7       	brne	.-4      	; 0x1d1a <LCD_sendCommand+0x290>
    1d1e:	fe 01       	movw	r30, r28
    1d20:	e7 5b       	subi	r30, 0xB7	; 183
    1d22:	ff 4f       	sbci	r31, 0xFF	; 255
    1d24:	91 83       	std	Z+1, r25	; 0x01
    1d26:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d28:	de 01       	movw	r26, r28
    1d2a:	a5 5b       	subi	r26, 0xB5	; 181
    1d2c:	bf 4f       	sbci	r27, 0xFF	; 255
    1d2e:	fe 01       	movw	r30, r28
    1d30:	e5 5b       	subi	r30, 0xB5	; 181
    1d32:	ff 4f       	sbci	r31, 0xFF	; 255
    1d34:	80 81       	ld	r24, Z
    1d36:	91 81       	ldd	r25, Z+1	; 0x01
    1d38:	01 97       	sbiw	r24, 0x01	; 1
    1d3a:	11 96       	adiw	r26, 0x01	; 1
    1d3c:	9c 93       	st	X, r25
    1d3e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d40:	fe 01       	movw	r30, r28
    1d42:	e5 5b       	subi	r30, 0xB5	; 181
    1d44:	ff 4f       	sbci	r31, 0xFF	; 255
    1d46:	80 81       	ld	r24, Z
    1d48:	91 81       	ldd	r25, Z+1	; 0x01
    1d4a:	00 97       	sbiw	r24, 0x00	; 0
    1d4c:	d1 f6       	brne	.-76     	; 0x1d02 <LCD_sendCommand+0x278>
    1d4e:	27 c0       	rjmp	.+78     	; 0x1d9e <LCD_sendCommand+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d50:	8e 01       	movw	r16, r28
    1d52:	05 5b       	subi	r16, 0xB5	; 181
    1d54:	1f 4f       	sbci	r17, 0xFF	; 255
    1d56:	fe 01       	movw	r30, r28
    1d58:	e3 5b       	subi	r30, 0xB3	; 179
    1d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5c:	60 81       	ld	r22, Z
    1d5e:	71 81       	ldd	r23, Z+1	; 0x01
    1d60:	82 81       	ldd	r24, Z+2	; 0x02
    1d62:	93 81       	ldd	r25, Z+3	; 0x03
    1d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	f8 01       	movw	r30, r16
    1d6e:	91 83       	std	Z+1, r25	; 0x01
    1d70:	80 83       	st	Z, r24
    1d72:	de 01       	movw	r26, r28
    1d74:	a9 5b       	subi	r26, 0xB9	; 185
    1d76:	bf 4f       	sbci	r27, 0xFF	; 255
    1d78:	fe 01       	movw	r30, r28
    1d7a:	e5 5b       	subi	r30, 0xB5	; 181
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	80 81       	ld	r24, Z
    1d80:	91 81       	ldd	r25, Z+1	; 0x01
    1d82:	8d 93       	st	X+, r24
    1d84:	9c 93       	st	X, r25
    1d86:	fe 01       	movw	r30, r28
    1d88:	e9 5b       	subi	r30, 0xB9	; 185
    1d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8c:	80 81       	ld	r24, Z
    1d8e:	91 81       	ldd	r25, Z+1	; 0x01
    1d90:	01 97       	sbiw	r24, 0x01	; 1
    1d92:	f1 f7       	brne	.-4      	; 0x1d90 <LCD_sendCommand+0x306>
    1d94:	fe 01       	movw	r30, r28
    1d96:	e9 5b       	subi	r30, 0xB9	; 185
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	91 83       	std	Z+1, r25	; 0x01
    1d9c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required command to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	0e 94 ca 0c 	call	0x1994	; 0x1994 <GPIO_readPort>
    1da4:	fe 01       	movw	r30, r28
    1da6:	ed 59       	subi	r30, 0x9D	; 157
    1da8:	ff 4f       	sbci	r31, 0xFF	; 255
    1daa:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | (command & 0xF0);
#else
	lcd_port_value = (lcd_port_value & 0xF0) | ((command & 0xF0) >> 4);
    1dac:	fe 01       	movw	r30, r28
    1dae:	ed 59       	subi	r30, 0x9D	; 157
    1db0:	ff 4f       	sbci	r31, 0xFF	; 255
    1db2:	80 81       	ld	r24, Z
    1db4:	98 2f       	mov	r25, r24
    1db6:	90 7f       	andi	r25, 0xF0	; 240
    1db8:	fe 01       	movw	r30, r28
    1dba:	ec 59       	subi	r30, 0x9C	; 156
    1dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbe:	80 81       	ld	r24, Z
    1dc0:	82 95       	swap	r24
    1dc2:	8f 70       	andi	r24, 0x0F	; 15
    1dc4:	89 2b       	or	r24, r25
    1dc6:	fe 01       	movw	r30, r28
    1dc8:	ed 59       	subi	r30, 0x9D	; 157
    1dca:	ff 4f       	sbci	r31, 0xFF	; 255
    1dcc:	80 83       	st	Z, r24
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    1dce:	fe 01       	movw	r30, r28
    1dd0:	ed 59       	subi	r30, 0x9D	; 157
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	80 e0       	ldi	r24, 0x00	; 0
    1dd6:	60 81       	ld	r22, Z
    1dd8:	0e 94 86 0c 	call	0x190c	; 0x190c <GPIO_writePort>
    1ddc:	fe 01       	movw	r30, r28
    1dde:	ed 5b       	subi	r30, 0xBD	; 189
    1de0:	ff 4f       	sbci	r31, 0xFF	; 255
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	a0 e8       	ldi	r26, 0x80	; 128
    1de8:	bf e3       	ldi	r27, 0x3F	; 63
    1dea:	80 83       	st	Z, r24
    1dec:	91 83       	std	Z+1, r25	; 0x01
    1dee:	a2 83       	std	Z+2, r26	; 0x02
    1df0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df2:	8e 01       	movw	r16, r28
    1df4:	01 5c       	subi	r16, 0xC1	; 193
    1df6:	1f 4f       	sbci	r17, 0xFF	; 255
    1df8:	fe 01       	movw	r30, r28
    1dfa:	ed 5b       	subi	r30, 0xBD	; 189
    1dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfe:	60 81       	ld	r22, Z
    1e00:	71 81       	ldd	r23, Z+1	; 0x01
    1e02:	82 81       	ldd	r24, Z+2	; 0x02
    1e04:	93 81       	ldd	r25, Z+3	; 0x03
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	4a e7       	ldi	r20, 0x7A	; 122
    1e0c:	53 e4       	ldi	r21, 0x43	; 67
    1e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	f8 01       	movw	r30, r16
    1e18:	80 83       	st	Z, r24
    1e1a:	91 83       	std	Z+1, r25	; 0x01
    1e1c:	a2 83       	std	Z+2, r26	; 0x02
    1e1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e20:	fe 01       	movw	r30, r28
    1e22:	ff 96       	adiw	r30, 0x3f	; 63
    1e24:	60 81       	ld	r22, Z
    1e26:	71 81       	ldd	r23, Z+1	; 0x01
    1e28:	82 81       	ldd	r24, Z+2	; 0x02
    1e2a:	93 81       	ldd	r25, Z+3	; 0x03
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	40 e8       	ldi	r20, 0x80	; 128
    1e32:	5f e3       	ldi	r21, 0x3F	; 63
    1e34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e38:	88 23       	and	r24, r24
    1e3a:	2c f4       	brge	.+10     	; 0x1e46 <LCD_sendCommand+0x3bc>
		__ticks = 1;
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	9e af       	std	Y+62, r25	; 0x3e
    1e42:	8d af       	std	Y+61, r24	; 0x3d
    1e44:	46 c0       	rjmp	.+140    	; 0x1ed2 <LCD_sendCommand+0x448>
	else if (__tmp > 65535)
    1e46:	fe 01       	movw	r30, r28
    1e48:	ff 96       	adiw	r30, 0x3f	; 63
    1e4a:	60 81       	ld	r22, Z
    1e4c:	71 81       	ldd	r23, Z+1	; 0x01
    1e4e:	82 81       	ldd	r24, Z+2	; 0x02
    1e50:	93 81       	ldd	r25, Z+3	; 0x03
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	3f ef       	ldi	r19, 0xFF	; 255
    1e56:	4f e7       	ldi	r20, 0x7F	; 127
    1e58:	57 e4       	ldi	r21, 0x47	; 71
    1e5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e5e:	18 16       	cp	r1, r24
    1e60:	64 f5       	brge	.+88     	; 0x1eba <LCD_sendCommand+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e62:	fe 01       	movw	r30, r28
    1e64:	ed 5b       	subi	r30, 0xBD	; 189
    1e66:	ff 4f       	sbci	r31, 0xFF	; 255
    1e68:	60 81       	ld	r22, Z
    1e6a:	71 81       	ldd	r23, Z+1	; 0x01
    1e6c:	82 81       	ldd	r24, Z+2	; 0x02
    1e6e:	93 81       	ldd	r25, Z+3	; 0x03
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	40 e2       	ldi	r20, 0x20	; 32
    1e76:	51 e4       	ldi	r21, 0x41	; 65
    1e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	bc 01       	movw	r22, r24
    1e82:	cd 01       	movw	r24, r26
    1e84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	9e af       	std	Y+62, r25	; 0x3e
    1e8e:	8d af       	std	Y+61, r24	; 0x3d
    1e90:	0f c0       	rjmp	.+30     	; 0x1eb0 <LCD_sendCommand+0x426>
    1e92:	89 e1       	ldi	r24, 0x19	; 25
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	9c af       	std	Y+60, r25	; 0x3c
    1e98:	8b af       	std	Y+59, r24	; 0x3b
    1e9a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e9c:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e9e:	01 97       	sbiw	r24, 0x01	; 1
    1ea0:	f1 f7       	brne	.-4      	; 0x1e9e <LCD_sendCommand+0x414>
    1ea2:	9c af       	std	Y+60, r25	; 0x3c
    1ea4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea6:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ea8:	9e ad       	ldd	r25, Y+62	; 0x3e
    1eaa:	01 97       	sbiw	r24, 0x01	; 1
    1eac:	9e af       	std	Y+62, r25	; 0x3e
    1eae:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1eb2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1eb4:	00 97       	sbiw	r24, 0x00	; 0
    1eb6:	69 f7       	brne	.-38     	; 0x1e92 <LCD_sendCommand+0x408>
    1eb8:	16 c0       	rjmp	.+44     	; 0x1ee6 <LCD_sendCommand+0x45c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eba:	fe 01       	movw	r30, r28
    1ebc:	ff 96       	adiw	r30, 0x3f	; 63
    1ebe:	60 81       	ld	r22, Z
    1ec0:	71 81       	ldd	r23, Z+1	; 0x01
    1ec2:	82 81       	ldd	r24, Z+2	; 0x02
    1ec4:	93 81       	ldd	r25, Z+3	; 0x03
    1ec6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	9e af       	std	Y+62, r25	; 0x3e
    1ed0:	8d af       	std	Y+61, r24	; 0x3d
    1ed2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ed4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ed6:	9a af       	std	Y+58, r25	; 0x3a
    1ed8:	89 af       	std	Y+57, r24	; 0x39
    1eda:	89 ad       	ldd	r24, Y+57	; 0x39
    1edc:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ede:	01 97       	sbiw	r24, 0x01	; 1
    1ee0:	f1 f7       	brne	.-4      	; 0x1ede <LCD_sendCommand+0x454>
    1ee2:	9a af       	std	Y+58, r25	; 0x3a
    1ee4:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	65 e0       	ldi	r22, 0x05	; 5
    1eea:	40 e0       	ldi	r20, 0x00	; 0
    1eec:	0e 94 bc 0a 	call	0x1578	; 0x1578 <GPIO_writePin>
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	a0 e8       	ldi	r26, 0x80	; 128
    1ef6:	bf e3       	ldi	r27, 0x3F	; 63
    1ef8:	8d ab       	std	Y+53, r24	; 0x35
    1efa:	9e ab       	std	Y+54, r25	; 0x36
    1efc:	af ab       	std	Y+55, r26	; 0x37
    1efe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f00:	6d a9       	ldd	r22, Y+53	; 0x35
    1f02:	7e a9       	ldd	r23, Y+54	; 0x36
    1f04:	8f a9       	ldd	r24, Y+55	; 0x37
    1f06:	98 ad       	ldd	r25, Y+56	; 0x38
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	4a e7       	ldi	r20, 0x7A	; 122
    1f0e:	53 e4       	ldi	r21, 0x43	; 67
    1f10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	89 ab       	std	Y+49, r24	; 0x31
    1f1a:	9a ab       	std	Y+50, r25	; 0x32
    1f1c:	ab ab       	std	Y+51, r26	; 0x33
    1f1e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f20:	69 a9       	ldd	r22, Y+49	; 0x31
    1f22:	7a a9       	ldd	r23, Y+50	; 0x32
    1f24:	8b a9       	ldd	r24, Y+51	; 0x33
    1f26:	9c a9       	ldd	r25, Y+52	; 0x34
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	40 e8       	ldi	r20, 0x80	; 128
    1f2e:	5f e3       	ldi	r21, 0x3F	; 63
    1f30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f34:	88 23       	and	r24, r24
    1f36:	2c f4       	brge	.+10     	; 0x1f42 <LCD_sendCommand+0x4b8>
		__ticks = 1;
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	98 ab       	std	Y+48, r25	; 0x30
    1f3e:	8f a7       	std	Y+47, r24	; 0x2f
    1f40:	3f c0       	rjmp	.+126    	; 0x1fc0 <LCD_sendCommand+0x536>
	else if (__tmp > 65535)
    1f42:	69 a9       	ldd	r22, Y+49	; 0x31
    1f44:	7a a9       	ldd	r23, Y+50	; 0x32
    1f46:	8b a9       	ldd	r24, Y+51	; 0x33
    1f48:	9c a9       	ldd	r25, Y+52	; 0x34
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	3f ef       	ldi	r19, 0xFF	; 255
    1f4e:	4f e7       	ldi	r20, 0x7F	; 127
    1f50:	57 e4       	ldi	r21, 0x47	; 71
    1f52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f56:	18 16       	cp	r1, r24
    1f58:	4c f5       	brge	.+82     	; 0x1fac <LCD_sendCommand+0x522>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f5a:	6d a9       	ldd	r22, Y+53	; 0x35
    1f5c:	7e a9       	ldd	r23, Y+54	; 0x36
    1f5e:	8f a9       	ldd	r24, Y+55	; 0x37
    1f60:	98 ad       	ldd	r25, Y+56	; 0x38
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	40 e2       	ldi	r20, 0x20	; 32
    1f68:	51 e4       	ldi	r21, 0x41	; 65
    1f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	bc 01       	movw	r22, r24
    1f74:	cd 01       	movw	r24, r26
    1f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	98 ab       	std	Y+48, r25	; 0x30
    1f80:	8f a7       	std	Y+47, r24	; 0x2f
    1f82:	0f c0       	rjmp	.+30     	; 0x1fa2 <LCD_sendCommand+0x518>
    1f84:	89 e1       	ldi	r24, 0x19	; 25
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	9e a7       	std	Y+46, r25	; 0x2e
    1f8a:	8d a7       	std	Y+45, r24	; 0x2d
    1f8c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f8e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f90:	01 97       	sbiw	r24, 0x01	; 1
    1f92:	f1 f7       	brne	.-4      	; 0x1f90 <LCD_sendCommand+0x506>
    1f94:	9e a7       	std	Y+46, r25	; 0x2e
    1f96:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f98:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f9a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f9c:	01 97       	sbiw	r24, 0x01	; 1
    1f9e:	98 ab       	std	Y+48, r25	; 0x30
    1fa0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fa4:	98 a9       	ldd	r25, Y+48	; 0x30
    1fa6:	00 97       	sbiw	r24, 0x00	; 0
    1fa8:	69 f7       	brne	.-38     	; 0x1f84 <LCD_sendCommand+0x4fa>
    1faa:	14 c0       	rjmp	.+40     	; 0x1fd4 <LCD_sendCommand+0x54a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fac:	69 a9       	ldd	r22, Y+49	; 0x31
    1fae:	7a a9       	ldd	r23, Y+50	; 0x32
    1fb0:	8b a9       	ldd	r24, Y+51	; 0x33
    1fb2:	9c a9       	ldd	r25, Y+52	; 0x34
    1fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	98 ab       	std	Y+48, r25	; 0x30
    1fbe:	8f a7       	std	Y+47, r24	; 0x2f
    1fc0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fc2:	98 a9       	ldd	r25, Y+48	; 0x30
    1fc4:	9c a7       	std	Y+44, r25	; 0x2c
    1fc6:	8b a7       	std	Y+43, r24	; 0x2b
    1fc8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fca:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fcc:	01 97       	sbiw	r24, 0x01	; 1
    1fce:	f1 f7       	brne	.-4      	; 0x1fcc <LCD_sendCommand+0x542>
    1fd0:	9c a7       	std	Y+44, r25	; 0x2c
    1fd2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	65 e0       	ldi	r22, 0x05	; 5
    1fd8:	41 e0       	ldi	r20, 0x01	; 1
    1fda:	0e 94 bc 0a 	call	0x1578	; 0x1578 <GPIO_writePin>
    1fde:	80 e0       	ldi	r24, 0x00	; 0
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	a0 e8       	ldi	r26, 0x80	; 128
    1fe4:	bf e3       	ldi	r27, 0x3F	; 63
    1fe6:	8f a3       	std	Y+39, r24	; 0x27
    1fe8:	98 a7       	std	Y+40, r25	; 0x28
    1fea:	a9 a7       	std	Y+41, r26	; 0x29
    1fec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fee:	6f a1       	ldd	r22, Y+39	; 0x27
    1ff0:	78 a5       	ldd	r23, Y+40	; 0x28
    1ff2:	89 a5       	ldd	r24, Y+41	; 0x29
    1ff4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	4a e7       	ldi	r20, 0x7A	; 122
    1ffc:	53 e4       	ldi	r21, 0x43	; 67
    1ffe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	8b a3       	std	Y+35, r24	; 0x23
    2008:	9c a3       	std	Y+36, r25	; 0x24
    200a:	ad a3       	std	Y+37, r26	; 0x25
    200c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    200e:	6b a1       	ldd	r22, Y+35	; 0x23
    2010:	7c a1       	ldd	r23, Y+36	; 0x24
    2012:	8d a1       	ldd	r24, Y+37	; 0x25
    2014:	9e a1       	ldd	r25, Y+38	; 0x26
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	40 e8       	ldi	r20, 0x80	; 128
    201c:	5f e3       	ldi	r21, 0x3F	; 63
    201e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2022:	88 23       	and	r24, r24
    2024:	2c f4       	brge	.+10     	; 0x2030 <LCD_sendCommand+0x5a6>
		__ticks = 1;
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	9a a3       	std	Y+34, r25	; 0x22
    202c:	89 a3       	std	Y+33, r24	; 0x21
    202e:	3f c0       	rjmp	.+126    	; 0x20ae <LCD_sendCommand+0x624>
	else if (__tmp > 65535)
    2030:	6b a1       	ldd	r22, Y+35	; 0x23
    2032:	7c a1       	ldd	r23, Y+36	; 0x24
    2034:	8d a1       	ldd	r24, Y+37	; 0x25
    2036:	9e a1       	ldd	r25, Y+38	; 0x26
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	3f ef       	ldi	r19, 0xFF	; 255
    203c:	4f e7       	ldi	r20, 0x7F	; 127
    203e:	57 e4       	ldi	r21, 0x47	; 71
    2040:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2044:	18 16       	cp	r1, r24
    2046:	4c f5       	brge	.+82     	; 0x209a <LCD_sendCommand+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2048:	6f a1       	ldd	r22, Y+39	; 0x27
    204a:	78 a5       	ldd	r23, Y+40	; 0x28
    204c:	89 a5       	ldd	r24, Y+41	; 0x29
    204e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	40 e2       	ldi	r20, 0x20	; 32
    2056:	51 e4       	ldi	r21, 0x41	; 65
    2058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	bc 01       	movw	r22, r24
    2062:	cd 01       	movw	r24, r26
    2064:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	9a a3       	std	Y+34, r25	; 0x22
    206e:	89 a3       	std	Y+33, r24	; 0x21
    2070:	0f c0       	rjmp	.+30     	; 0x2090 <LCD_sendCommand+0x606>
    2072:	89 e1       	ldi	r24, 0x19	; 25
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	98 a3       	std	Y+32, r25	; 0x20
    2078:	8f 8f       	std	Y+31, r24	; 0x1f
    207a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    207c:	98 a1       	ldd	r25, Y+32	; 0x20
    207e:	01 97       	sbiw	r24, 0x01	; 1
    2080:	f1 f7       	brne	.-4      	; 0x207e <LCD_sendCommand+0x5f4>
    2082:	98 a3       	std	Y+32, r25	; 0x20
    2084:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2086:	89 a1       	ldd	r24, Y+33	; 0x21
    2088:	9a a1       	ldd	r25, Y+34	; 0x22
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	9a a3       	std	Y+34, r25	; 0x22
    208e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2090:	89 a1       	ldd	r24, Y+33	; 0x21
    2092:	9a a1       	ldd	r25, Y+34	; 0x22
    2094:	00 97       	sbiw	r24, 0x00	; 0
    2096:	69 f7       	brne	.-38     	; 0x2072 <LCD_sendCommand+0x5e8>
    2098:	14 c0       	rjmp	.+40     	; 0x20c2 <LCD_sendCommand+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    209a:	6b a1       	ldd	r22, Y+35	; 0x23
    209c:	7c a1       	ldd	r23, Y+36	; 0x24
    209e:	8d a1       	ldd	r24, Y+37	; 0x25
    20a0:	9e a1       	ldd	r25, Y+38	; 0x26
    20a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	9a a3       	std	Y+34, r25	; 0x22
    20ac:	89 a3       	std	Y+33, r24	; 0x21
    20ae:	89 a1       	ldd	r24, Y+33	; 0x21
    20b0:	9a a1       	ldd	r25, Y+34	; 0x22
    20b2:	9e 8f       	std	Y+30, r25	; 0x1e
    20b4:	8d 8f       	std	Y+29, r24	; 0x1d
    20b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20ba:	01 97       	sbiw	r24, 0x01	; 1
    20bc:	f1 f7       	brne	.-4      	; 0x20ba <LCD_sendCommand+0x630>
    20be:	9e 8f       	std	Y+30, r25	; 0x1e
    20c0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the first 4 bits of the required command to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    20c2:	80 e0       	ldi	r24, 0x00	; 0
    20c4:	0e 94 ca 0c 	call	0x1994	; 0x1994 <GPIO_readPort>
    20c8:	fe 01       	movw	r30, r28
    20ca:	ed 59       	subi	r30, 0x9D	; 157
    20cc:	ff 4f       	sbci	r31, 0xFF	; 255
    20ce:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | ((command & 0x0F) << 4);
#else
	lcd_port_value = (lcd_port_value & 0xF0) | (command & 0x0F);
    20d0:	fe 01       	movw	r30, r28
    20d2:	ed 59       	subi	r30, 0x9D	; 157
    20d4:	ff 4f       	sbci	r31, 0xFF	; 255
    20d6:	80 81       	ld	r24, Z
    20d8:	98 2f       	mov	r25, r24
    20da:	90 7f       	andi	r25, 0xF0	; 240
    20dc:	fe 01       	movw	r30, r28
    20de:	ec 59       	subi	r30, 0x9C	; 156
    20e0:	ff 4f       	sbci	r31, 0xFF	; 255
    20e2:	80 81       	ld	r24, Z
    20e4:	8f 70       	andi	r24, 0x0F	; 15
    20e6:	89 2b       	or	r24, r25
    20e8:	fe 01       	movw	r30, r28
    20ea:	ed 59       	subi	r30, 0x9D	; 157
    20ec:	ff 4f       	sbci	r31, 0xFF	; 255
    20ee:	80 83       	st	Z, r24
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    20f0:	fe 01       	movw	r30, r28
    20f2:	ed 59       	subi	r30, 0x9D	; 157
    20f4:	ff 4f       	sbci	r31, 0xFF	; 255
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	60 81       	ld	r22, Z
    20fa:	0e 94 86 0c 	call	0x190c	; 0x190c <GPIO_writePort>
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	a0 e8       	ldi	r26, 0x80	; 128
    2104:	bf e3       	ldi	r27, 0x3F	; 63
    2106:	89 8f       	std	Y+25, r24	; 0x19
    2108:	9a 8f       	std	Y+26, r25	; 0x1a
    210a:	ab 8f       	std	Y+27, r26	; 0x1b
    210c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    210e:	69 8d       	ldd	r22, Y+25	; 0x19
    2110:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2112:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2114:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	4a e7       	ldi	r20, 0x7A	; 122
    211c:	53 e4       	ldi	r21, 0x43	; 67
    211e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	8d 8b       	std	Y+21, r24	; 0x15
    2128:	9e 8b       	std	Y+22, r25	; 0x16
    212a:	af 8b       	std	Y+23, r26	; 0x17
    212c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    212e:	6d 89       	ldd	r22, Y+21	; 0x15
    2130:	7e 89       	ldd	r23, Y+22	; 0x16
    2132:	8f 89       	ldd	r24, Y+23	; 0x17
    2134:	98 8d       	ldd	r25, Y+24	; 0x18
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	40 e8       	ldi	r20, 0x80	; 128
    213c:	5f e3       	ldi	r21, 0x3F	; 63
    213e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2142:	88 23       	and	r24, r24
    2144:	2c f4       	brge	.+10     	; 0x2150 <LCD_sendCommand+0x6c6>
		__ticks = 1;
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	9c 8b       	std	Y+20, r25	; 0x14
    214c:	8b 8b       	std	Y+19, r24	; 0x13
    214e:	3f c0       	rjmp	.+126    	; 0x21ce <LCD_sendCommand+0x744>
	else if (__tmp > 65535)
    2150:	6d 89       	ldd	r22, Y+21	; 0x15
    2152:	7e 89       	ldd	r23, Y+22	; 0x16
    2154:	8f 89       	ldd	r24, Y+23	; 0x17
    2156:	98 8d       	ldd	r25, Y+24	; 0x18
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	3f ef       	ldi	r19, 0xFF	; 255
    215c:	4f e7       	ldi	r20, 0x7F	; 127
    215e:	57 e4       	ldi	r21, 0x47	; 71
    2160:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2164:	18 16       	cp	r1, r24
    2166:	4c f5       	brge	.+82     	; 0x21ba <LCD_sendCommand+0x730>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2168:	69 8d       	ldd	r22, Y+25	; 0x19
    216a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    216c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    216e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	40 e2       	ldi	r20, 0x20	; 32
    2176:	51 e4       	ldi	r21, 0x41	; 65
    2178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	bc 01       	movw	r22, r24
    2182:	cd 01       	movw	r24, r26
    2184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	9c 8b       	std	Y+20, r25	; 0x14
    218e:	8b 8b       	std	Y+19, r24	; 0x13
    2190:	0f c0       	rjmp	.+30     	; 0x21b0 <LCD_sendCommand+0x726>
    2192:	89 e1       	ldi	r24, 0x19	; 25
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	9a 8b       	std	Y+18, r25	; 0x12
    2198:	89 8b       	std	Y+17, r24	; 0x11
    219a:	89 89       	ldd	r24, Y+17	; 0x11
    219c:	9a 89       	ldd	r25, Y+18	; 0x12
    219e:	01 97       	sbiw	r24, 0x01	; 1
    21a0:	f1 f7       	brne	.-4      	; 0x219e <LCD_sendCommand+0x714>
    21a2:	9a 8b       	std	Y+18, r25	; 0x12
    21a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a6:	8b 89       	ldd	r24, Y+19	; 0x13
    21a8:	9c 89       	ldd	r25, Y+20	; 0x14
    21aa:	01 97       	sbiw	r24, 0x01	; 1
    21ac:	9c 8b       	std	Y+20, r25	; 0x14
    21ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b0:	8b 89       	ldd	r24, Y+19	; 0x13
    21b2:	9c 89       	ldd	r25, Y+20	; 0x14
    21b4:	00 97       	sbiw	r24, 0x00	; 0
    21b6:	69 f7       	brne	.-38     	; 0x2192 <LCD_sendCommand+0x708>
    21b8:	14 c0       	rjmp	.+40     	; 0x21e2 <LCD_sendCommand+0x758>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ba:	6d 89       	ldd	r22, Y+21	; 0x15
    21bc:	7e 89       	ldd	r23, Y+22	; 0x16
    21be:	8f 89       	ldd	r24, Y+23	; 0x17
    21c0:	98 8d       	ldd	r25, Y+24	; 0x18
    21c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	9c 8b       	std	Y+20, r25	; 0x14
    21cc:	8b 8b       	std	Y+19, r24	; 0x13
    21ce:	8b 89       	ldd	r24, Y+19	; 0x13
    21d0:	9c 89       	ldd	r25, Y+20	; 0x14
    21d2:	98 8b       	std	Y+16, r25	; 0x10
    21d4:	8f 87       	std	Y+15, r24	; 0x0f
    21d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    21d8:	98 89       	ldd	r25, Y+16	; 0x10
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	f1 f7       	brne	.-4      	; 0x21da <LCD_sendCommand+0x750>
    21de:	98 8b       	std	Y+16, r25	; 0x10
    21e0:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	65 e0       	ldi	r22, 0x05	; 5
    21e6:	40 e0       	ldi	r20, 0x00	; 0
    21e8:	0e 94 bc 0a 	call	0x1578	; 0x1578 <GPIO_writePin>
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	a0 e8       	ldi	r26, 0x80	; 128
    21f2:	bf e3       	ldi	r27, 0x3F	; 63
    21f4:	8b 87       	std	Y+11, r24	; 0x0b
    21f6:	9c 87       	std	Y+12, r25	; 0x0c
    21f8:	ad 87       	std	Y+13, r26	; 0x0d
    21fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    21fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2200:	8d 85       	ldd	r24, Y+13	; 0x0d
    2202:	9e 85       	ldd	r25, Y+14	; 0x0e
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	4a e7       	ldi	r20, 0x7A	; 122
    220a:	53 e4       	ldi	r21, 0x43	; 67
    220c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	8f 83       	std	Y+7, r24	; 0x07
    2216:	98 87       	std	Y+8, r25	; 0x08
    2218:	a9 87       	std	Y+9, r26	; 0x09
    221a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    221c:	6f 81       	ldd	r22, Y+7	; 0x07
    221e:	78 85       	ldd	r23, Y+8	; 0x08
    2220:	89 85       	ldd	r24, Y+9	; 0x09
    2222:	9a 85       	ldd	r25, Y+10	; 0x0a
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	40 e8       	ldi	r20, 0x80	; 128
    222a:	5f e3       	ldi	r21, 0x3F	; 63
    222c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2230:	88 23       	and	r24, r24
    2232:	2c f4       	brge	.+10     	; 0x223e <LCD_sendCommand+0x7b4>
		__ticks = 1;
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	9e 83       	std	Y+6, r25	; 0x06
    223a:	8d 83       	std	Y+5, r24	; 0x05
    223c:	3f c0       	rjmp	.+126    	; 0x22bc <LCD_sendCommand+0x832>
	else if (__tmp > 65535)
    223e:	6f 81       	ldd	r22, Y+7	; 0x07
    2240:	78 85       	ldd	r23, Y+8	; 0x08
    2242:	89 85       	ldd	r24, Y+9	; 0x09
    2244:	9a 85       	ldd	r25, Y+10	; 0x0a
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	3f ef       	ldi	r19, 0xFF	; 255
    224a:	4f e7       	ldi	r20, 0x7F	; 127
    224c:	57 e4       	ldi	r21, 0x47	; 71
    224e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2252:	18 16       	cp	r1, r24
    2254:	4c f5       	brge	.+82     	; 0x22a8 <LCD_sendCommand+0x81e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2256:	6b 85       	ldd	r22, Y+11	; 0x0b
    2258:	7c 85       	ldd	r23, Y+12	; 0x0c
    225a:	8d 85       	ldd	r24, Y+13	; 0x0d
    225c:	9e 85       	ldd	r25, Y+14	; 0x0e
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	40 e2       	ldi	r20, 0x20	; 32
    2264:	51 e4       	ldi	r21, 0x41	; 65
    2266:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	bc 01       	movw	r22, r24
    2270:	cd 01       	movw	r24, r26
    2272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	9e 83       	std	Y+6, r25	; 0x06
    227c:	8d 83       	std	Y+5, r24	; 0x05
    227e:	0f c0       	rjmp	.+30     	; 0x229e <LCD_sendCommand+0x814>
    2280:	89 e1       	ldi	r24, 0x19	; 25
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	9c 83       	std	Y+4, r25	; 0x04
    2286:	8b 83       	std	Y+3, r24	; 0x03
    2288:	8b 81       	ldd	r24, Y+3	; 0x03
    228a:	9c 81       	ldd	r25, Y+4	; 0x04
    228c:	01 97       	sbiw	r24, 0x01	; 1
    228e:	f1 f7       	brne	.-4      	; 0x228c <LCD_sendCommand+0x802>
    2290:	9c 83       	std	Y+4, r25	; 0x04
    2292:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2294:	8d 81       	ldd	r24, Y+5	; 0x05
    2296:	9e 81       	ldd	r25, Y+6	; 0x06
    2298:	01 97       	sbiw	r24, 0x01	; 1
    229a:	9e 83       	std	Y+6, r25	; 0x06
    229c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    229e:	8d 81       	ldd	r24, Y+5	; 0x05
    22a0:	9e 81       	ldd	r25, Y+6	; 0x06
    22a2:	00 97       	sbiw	r24, 0x00	; 0
    22a4:	69 f7       	brne	.-38     	; 0x2280 <LCD_sendCommand+0x7f6>
    22a6:	14 c0       	rjmp	.+40     	; 0x22d0 <LCD_sendCommand+0x846>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a8:	6f 81       	ldd	r22, Y+7	; 0x07
    22aa:	78 85       	ldd	r23, Y+8	; 0x08
    22ac:	89 85       	ldd	r24, Y+9	; 0x09
    22ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	9e 83       	std	Y+6, r25	; 0x06
    22ba:	8d 83       	std	Y+5, r24	; 0x05
    22bc:	8d 81       	ldd	r24, Y+5	; 0x05
    22be:	9e 81       	ldd	r25, Y+6	; 0x06
    22c0:	9a 83       	std	Y+2, r25	; 0x02
    22c2:	89 83       	std	Y+1, r24	; 0x01
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
    22c6:	9a 81       	ldd	r25, Y+2	; 0x02
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	f1 f7       	brne	.-4      	; 0x22c8 <LCD_sendCommand+0x83e>
    22cc:	9a 83       	std	Y+2, r25	; 0x02
    22ce:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    22d0:	cc 59       	subi	r28, 0x9C	; 156
    22d2:	df 4f       	sbci	r29, 0xFF	; 255
    22d4:	0f b6       	in	r0, 0x3f	; 63
    22d6:	f8 94       	cli
    22d8:	de bf       	out	0x3e, r29	; 62
    22da:	0f be       	out	0x3f, r0	; 63
    22dc:	cd bf       	out	0x3d, r28	; 61
    22de:	cf 91       	pop	r28
    22e0:	df 91       	pop	r29
    22e2:	1f 91       	pop	r17
    22e4:	0f 91       	pop	r16
    22e6:	08 95       	ret

000022e8 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    22e8:	0f 93       	push	r16
    22ea:	1f 93       	push	r17
    22ec:	df 93       	push	r29
    22ee:	cf 93       	push	r28
    22f0:	cd b7       	in	r28, 0x3d	; 61
    22f2:	de b7       	in	r29, 0x3e	; 62
    22f4:	c4 56       	subi	r28, 0x64	; 100
    22f6:	d0 40       	sbci	r29, 0x00	; 0
    22f8:	0f b6       	in	r0, 0x3f	; 63
    22fa:	f8 94       	cli
    22fc:	de bf       	out	0x3e, r29	; 62
    22fe:	0f be       	out	0x3f, r0	; 63
    2300:	cd bf       	out	0x3d, r28	; 61
    2302:	fe 01       	movw	r30, r28
    2304:	ec 59       	subi	r30, 0x9C	; 156
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	80 83       	st	Z, r24
	uint8 lcd_port_value = 0;
    230a:	fe 01       	movw	r30, r28
    230c:	ed 59       	subi	r30, 0x9D	; 157
    230e:	ff 4f       	sbci	r31, 0xFF	; 255
    2310:	10 82       	st	Z, r1
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	67 e0       	ldi	r22, 0x07	; 7
    2316:	41 e0       	ldi	r20, 0x01	; 1
    2318:	0e 94 bc 0a 	call	0x1578	; 0x1578 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    231c:	80 e0       	ldi	r24, 0x00	; 0
    231e:	66 e0       	ldi	r22, 0x06	; 6
    2320:	40 e0       	ldi	r20, 0x00	; 0
    2322:	0e 94 bc 0a 	call	0x1578	; 0x1578 <GPIO_writePin>
    2326:	fe 01       	movw	r30, r28
    2328:	e1 5a       	subi	r30, 0xA1	; 161
    232a:	ff 4f       	sbci	r31, 0xFF	; 255
    232c:	80 e0       	ldi	r24, 0x00	; 0
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	a0 e8       	ldi	r26, 0x80	; 128
    2332:	bf e3       	ldi	r27, 0x3F	; 63
    2334:	80 83       	st	Z, r24
    2336:	91 83       	std	Z+1, r25	; 0x01
    2338:	a2 83       	std	Z+2, r26	; 0x02
    233a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    233c:	8e 01       	movw	r16, r28
    233e:	05 5a       	subi	r16, 0xA5	; 165
    2340:	1f 4f       	sbci	r17, 0xFF	; 255
    2342:	fe 01       	movw	r30, r28
    2344:	e1 5a       	subi	r30, 0xA1	; 161
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	60 81       	ld	r22, Z
    234a:	71 81       	ldd	r23, Z+1	; 0x01
    234c:	82 81       	ldd	r24, Z+2	; 0x02
    234e:	93 81       	ldd	r25, Z+3	; 0x03
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	4a e7       	ldi	r20, 0x7A	; 122
    2356:	53 e4       	ldi	r21, 0x43	; 67
    2358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	f8 01       	movw	r30, r16
    2362:	80 83       	st	Z, r24
    2364:	91 83       	std	Z+1, r25	; 0x01
    2366:	a2 83       	std	Z+2, r26	; 0x02
    2368:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    236a:	fe 01       	movw	r30, r28
    236c:	e5 5a       	subi	r30, 0xA5	; 165
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	60 81       	ld	r22, Z
    2372:	71 81       	ldd	r23, Z+1	; 0x01
    2374:	82 81       	ldd	r24, Z+2	; 0x02
    2376:	93 81       	ldd	r25, Z+3	; 0x03
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	40 e8       	ldi	r20, 0x80	; 128
    237e:	5f e3       	ldi	r21, 0x3F	; 63
    2380:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2384:	88 23       	and	r24, r24
    2386:	44 f4       	brge	.+16     	; 0x2398 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    2388:	fe 01       	movw	r30, r28
    238a:	e7 5a       	subi	r30, 0xA7	; 167
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	91 83       	std	Z+1, r25	; 0x01
    2394:	80 83       	st	Z, r24
    2396:	64 c0       	rjmp	.+200    	; 0x2460 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    2398:	fe 01       	movw	r30, r28
    239a:	e5 5a       	subi	r30, 0xA5	; 165
    239c:	ff 4f       	sbci	r31, 0xFF	; 255
    239e:	60 81       	ld	r22, Z
    23a0:	71 81       	ldd	r23, Z+1	; 0x01
    23a2:	82 81       	ldd	r24, Z+2	; 0x02
    23a4:	93 81       	ldd	r25, Z+3	; 0x03
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	3f ef       	ldi	r19, 0xFF	; 255
    23aa:	4f e7       	ldi	r20, 0x7F	; 127
    23ac:	57 e4       	ldi	r21, 0x47	; 71
    23ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23b2:	18 16       	cp	r1, r24
    23b4:	0c f0       	brlt	.+2      	; 0x23b8 <LCD_displayCharacter+0xd0>
    23b6:	43 c0       	rjmp	.+134    	; 0x243e <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b8:	fe 01       	movw	r30, r28
    23ba:	e1 5a       	subi	r30, 0xA1	; 161
    23bc:	ff 4f       	sbci	r31, 0xFF	; 255
    23be:	60 81       	ld	r22, Z
    23c0:	71 81       	ldd	r23, Z+1	; 0x01
    23c2:	82 81       	ldd	r24, Z+2	; 0x02
    23c4:	93 81       	ldd	r25, Z+3	; 0x03
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	40 e2       	ldi	r20, 0x20	; 32
    23cc:	51 e4       	ldi	r21, 0x41	; 65
    23ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	8e 01       	movw	r16, r28
    23d8:	07 5a       	subi	r16, 0xA7	; 167
    23da:	1f 4f       	sbci	r17, 0xFF	; 255
    23dc:	bc 01       	movw	r22, r24
    23de:	cd 01       	movw	r24, r26
    23e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	f8 01       	movw	r30, r16
    23ea:	91 83       	std	Z+1, r25	; 0x01
    23ec:	80 83       	st	Z, r24
    23ee:	1f c0       	rjmp	.+62     	; 0x242e <LCD_displayCharacter+0x146>
    23f0:	fe 01       	movw	r30, r28
    23f2:	e9 5a       	subi	r30, 0xA9	; 169
    23f4:	ff 4f       	sbci	r31, 0xFF	; 255
    23f6:	89 e1       	ldi	r24, 0x19	; 25
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	91 83       	std	Z+1, r25	; 0x01
    23fc:	80 83       	st	Z, r24
    23fe:	fe 01       	movw	r30, r28
    2400:	e9 5a       	subi	r30, 0xA9	; 169
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	80 81       	ld	r24, Z
    2406:	91 81       	ldd	r25, Z+1	; 0x01
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	f1 f7       	brne	.-4      	; 0x2408 <LCD_displayCharacter+0x120>
    240c:	fe 01       	movw	r30, r28
    240e:	e9 5a       	subi	r30, 0xA9	; 169
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	91 83       	std	Z+1, r25	; 0x01
    2414:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2416:	de 01       	movw	r26, r28
    2418:	a7 5a       	subi	r26, 0xA7	; 167
    241a:	bf 4f       	sbci	r27, 0xFF	; 255
    241c:	fe 01       	movw	r30, r28
    241e:	e7 5a       	subi	r30, 0xA7	; 167
    2420:	ff 4f       	sbci	r31, 0xFF	; 255
    2422:	80 81       	ld	r24, Z
    2424:	91 81       	ldd	r25, Z+1	; 0x01
    2426:	01 97       	sbiw	r24, 0x01	; 1
    2428:	11 96       	adiw	r26, 0x01	; 1
    242a:	9c 93       	st	X, r25
    242c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    242e:	fe 01       	movw	r30, r28
    2430:	e7 5a       	subi	r30, 0xA7	; 167
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	80 81       	ld	r24, Z
    2436:	91 81       	ldd	r25, Z+1	; 0x01
    2438:	00 97       	sbiw	r24, 0x00	; 0
    243a:	d1 f6       	brne	.-76     	; 0x23f0 <LCD_displayCharacter+0x108>
    243c:	27 c0       	rjmp	.+78     	; 0x248c <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    243e:	8e 01       	movw	r16, r28
    2440:	07 5a       	subi	r16, 0xA7	; 167
    2442:	1f 4f       	sbci	r17, 0xFF	; 255
    2444:	fe 01       	movw	r30, r28
    2446:	e5 5a       	subi	r30, 0xA5	; 165
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	60 81       	ld	r22, Z
    244c:	71 81       	ldd	r23, Z+1	; 0x01
    244e:	82 81       	ldd	r24, Z+2	; 0x02
    2450:	93 81       	ldd	r25, Z+3	; 0x03
    2452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	f8 01       	movw	r30, r16
    245c:	91 83       	std	Z+1, r25	; 0x01
    245e:	80 83       	st	Z, r24
    2460:	de 01       	movw	r26, r28
    2462:	ab 5a       	subi	r26, 0xAB	; 171
    2464:	bf 4f       	sbci	r27, 0xFF	; 255
    2466:	fe 01       	movw	r30, r28
    2468:	e7 5a       	subi	r30, 0xA7	; 167
    246a:	ff 4f       	sbci	r31, 0xFF	; 255
    246c:	80 81       	ld	r24, Z
    246e:	91 81       	ldd	r25, Z+1	; 0x01
    2470:	8d 93       	st	X+, r24
    2472:	9c 93       	st	X, r25
    2474:	fe 01       	movw	r30, r28
    2476:	eb 5a       	subi	r30, 0xAB	; 171
    2478:	ff 4f       	sbci	r31, 0xFF	; 255
    247a:	80 81       	ld	r24, Z
    247c:	91 81       	ldd	r25, Z+1	; 0x01
    247e:	01 97       	sbiw	r24, 0x01	; 1
    2480:	f1 f7       	brne	.-4      	; 0x247e <LCD_displayCharacter+0x196>
    2482:	fe 01       	movw	r30, r28
    2484:	eb 5a       	subi	r30, 0xAB	; 171
    2486:	ff 4f       	sbci	r31, 0xFF	; 255
    2488:	91 83       	std	Z+1, r25	; 0x01
    248a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	65 e0       	ldi	r22, 0x05	; 5
    2490:	41 e0       	ldi	r20, 0x01	; 1
    2492:	0e 94 bc 0a 	call	0x1578	; 0x1578 <GPIO_writePin>
    2496:	fe 01       	movw	r30, r28
    2498:	ef 5a       	subi	r30, 0xAF	; 175
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	a0 e8       	ldi	r26, 0x80	; 128
    24a2:	bf e3       	ldi	r27, 0x3F	; 63
    24a4:	80 83       	st	Z, r24
    24a6:	91 83       	std	Z+1, r25	; 0x01
    24a8:	a2 83       	std	Z+2, r26	; 0x02
    24aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ac:	8e 01       	movw	r16, r28
    24ae:	03 5b       	subi	r16, 0xB3	; 179
    24b0:	1f 4f       	sbci	r17, 0xFF	; 255
    24b2:	fe 01       	movw	r30, r28
    24b4:	ef 5a       	subi	r30, 0xAF	; 175
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	60 81       	ld	r22, Z
    24ba:	71 81       	ldd	r23, Z+1	; 0x01
    24bc:	82 81       	ldd	r24, Z+2	; 0x02
    24be:	93 81       	ldd	r25, Z+3	; 0x03
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	4a e7       	ldi	r20, 0x7A	; 122
    24c6:	53 e4       	ldi	r21, 0x43	; 67
    24c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	f8 01       	movw	r30, r16
    24d2:	80 83       	st	Z, r24
    24d4:	91 83       	std	Z+1, r25	; 0x01
    24d6:	a2 83       	std	Z+2, r26	; 0x02
    24d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24da:	fe 01       	movw	r30, r28
    24dc:	e3 5b       	subi	r30, 0xB3	; 179
    24de:	ff 4f       	sbci	r31, 0xFF	; 255
    24e0:	60 81       	ld	r22, Z
    24e2:	71 81       	ldd	r23, Z+1	; 0x01
    24e4:	82 81       	ldd	r24, Z+2	; 0x02
    24e6:	93 81       	ldd	r25, Z+3	; 0x03
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	40 e8       	ldi	r20, 0x80	; 128
    24ee:	5f e3       	ldi	r21, 0x3F	; 63
    24f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24f4:	88 23       	and	r24, r24
    24f6:	44 f4       	brge	.+16     	; 0x2508 <LCD_displayCharacter+0x220>
		__ticks = 1;
    24f8:	fe 01       	movw	r30, r28
    24fa:	e5 5b       	subi	r30, 0xB5	; 181
    24fc:	ff 4f       	sbci	r31, 0xFF	; 255
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	91 83       	std	Z+1, r25	; 0x01
    2504:	80 83       	st	Z, r24
    2506:	64 c0       	rjmp	.+200    	; 0x25d0 <LCD_displayCharacter+0x2e8>
	else if (__tmp > 65535)
    2508:	fe 01       	movw	r30, r28
    250a:	e3 5b       	subi	r30, 0xB3	; 179
    250c:	ff 4f       	sbci	r31, 0xFF	; 255
    250e:	60 81       	ld	r22, Z
    2510:	71 81       	ldd	r23, Z+1	; 0x01
    2512:	82 81       	ldd	r24, Z+2	; 0x02
    2514:	93 81       	ldd	r25, Z+3	; 0x03
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	3f ef       	ldi	r19, 0xFF	; 255
    251a:	4f e7       	ldi	r20, 0x7F	; 127
    251c:	57 e4       	ldi	r21, 0x47	; 71
    251e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2522:	18 16       	cp	r1, r24
    2524:	0c f0       	brlt	.+2      	; 0x2528 <LCD_displayCharacter+0x240>
    2526:	43 c0       	rjmp	.+134    	; 0x25ae <LCD_displayCharacter+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2528:	fe 01       	movw	r30, r28
    252a:	ef 5a       	subi	r30, 0xAF	; 175
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	60 81       	ld	r22, Z
    2530:	71 81       	ldd	r23, Z+1	; 0x01
    2532:	82 81       	ldd	r24, Z+2	; 0x02
    2534:	93 81       	ldd	r25, Z+3	; 0x03
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	40 e2       	ldi	r20, 0x20	; 32
    253c:	51 e4       	ldi	r21, 0x41	; 65
    253e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	8e 01       	movw	r16, r28
    2548:	05 5b       	subi	r16, 0xB5	; 181
    254a:	1f 4f       	sbci	r17, 0xFF	; 255
    254c:	bc 01       	movw	r22, r24
    254e:	cd 01       	movw	r24, r26
    2550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	f8 01       	movw	r30, r16
    255a:	91 83       	std	Z+1, r25	; 0x01
    255c:	80 83       	st	Z, r24
    255e:	1f c0       	rjmp	.+62     	; 0x259e <LCD_displayCharacter+0x2b6>
    2560:	fe 01       	movw	r30, r28
    2562:	e7 5b       	subi	r30, 0xB7	; 183
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	89 e1       	ldi	r24, 0x19	; 25
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	91 83       	std	Z+1, r25	; 0x01
    256c:	80 83       	st	Z, r24
    256e:	fe 01       	movw	r30, r28
    2570:	e7 5b       	subi	r30, 0xB7	; 183
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	80 81       	ld	r24, Z
    2576:	91 81       	ldd	r25, Z+1	; 0x01
    2578:	01 97       	sbiw	r24, 0x01	; 1
    257a:	f1 f7       	brne	.-4      	; 0x2578 <LCD_displayCharacter+0x290>
    257c:	fe 01       	movw	r30, r28
    257e:	e7 5b       	subi	r30, 0xB7	; 183
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	91 83       	std	Z+1, r25	; 0x01
    2584:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2586:	de 01       	movw	r26, r28
    2588:	a5 5b       	subi	r26, 0xB5	; 181
    258a:	bf 4f       	sbci	r27, 0xFF	; 255
    258c:	fe 01       	movw	r30, r28
    258e:	e5 5b       	subi	r30, 0xB5	; 181
    2590:	ff 4f       	sbci	r31, 0xFF	; 255
    2592:	80 81       	ld	r24, Z
    2594:	91 81       	ldd	r25, Z+1	; 0x01
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	11 96       	adiw	r26, 0x01	; 1
    259a:	9c 93       	st	X, r25
    259c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    259e:	fe 01       	movw	r30, r28
    25a0:	e5 5b       	subi	r30, 0xB5	; 181
    25a2:	ff 4f       	sbci	r31, 0xFF	; 255
    25a4:	80 81       	ld	r24, Z
    25a6:	91 81       	ldd	r25, Z+1	; 0x01
    25a8:	00 97       	sbiw	r24, 0x00	; 0
    25aa:	d1 f6       	brne	.-76     	; 0x2560 <LCD_displayCharacter+0x278>
    25ac:	27 c0       	rjmp	.+78     	; 0x25fc <LCD_displayCharacter+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ae:	8e 01       	movw	r16, r28
    25b0:	05 5b       	subi	r16, 0xB5	; 181
    25b2:	1f 4f       	sbci	r17, 0xFF	; 255
    25b4:	fe 01       	movw	r30, r28
    25b6:	e3 5b       	subi	r30, 0xB3	; 179
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	60 81       	ld	r22, Z
    25bc:	71 81       	ldd	r23, Z+1	; 0x01
    25be:	82 81       	ldd	r24, Z+2	; 0x02
    25c0:	93 81       	ldd	r25, Z+3	; 0x03
    25c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	f8 01       	movw	r30, r16
    25cc:	91 83       	std	Z+1, r25	; 0x01
    25ce:	80 83       	st	Z, r24
    25d0:	de 01       	movw	r26, r28
    25d2:	a9 5b       	subi	r26, 0xB9	; 185
    25d4:	bf 4f       	sbci	r27, 0xFF	; 255
    25d6:	fe 01       	movw	r30, r28
    25d8:	e5 5b       	subi	r30, 0xB5	; 181
    25da:	ff 4f       	sbci	r31, 0xFF	; 255
    25dc:	80 81       	ld	r24, Z
    25de:	91 81       	ldd	r25, Z+1	; 0x01
    25e0:	8d 93       	st	X+, r24
    25e2:	9c 93       	st	X, r25
    25e4:	fe 01       	movw	r30, r28
    25e6:	e9 5b       	subi	r30, 0xB9	; 185
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	80 81       	ld	r24, Z
    25ec:	91 81       	ldd	r25, Z+1	; 0x01
    25ee:	01 97       	sbiw	r24, 0x01	; 1
    25f0:	f1 f7       	brne	.-4      	; 0x25ee <LCD_displayCharacter+0x306>
    25f2:	fe 01       	movw	r30, r28
    25f4:	e9 5b       	subi	r30, 0xB9	; 185
    25f6:	ff 4f       	sbci	r31, 0xFF	; 255
    25f8:	91 83       	std	Z+1, r25	; 0x01
    25fa:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required data to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    25fc:	80 e0       	ldi	r24, 0x00	; 0
    25fe:	0e 94 ca 0c 	call	0x1994	; 0x1994 <GPIO_readPort>
    2602:	fe 01       	movw	r30, r28
    2604:	ed 59       	subi	r30, 0x9D	; 157
    2606:	ff 4f       	sbci	r31, 0xFF	; 255
    2608:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | (data & 0xF0);
#else
	lcd_port_value = (lcd_port_value & 0xF0) | ((data & 0xF0) >> 4);
    260a:	fe 01       	movw	r30, r28
    260c:	ed 59       	subi	r30, 0x9D	; 157
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	80 81       	ld	r24, Z
    2612:	98 2f       	mov	r25, r24
    2614:	90 7f       	andi	r25, 0xF0	; 240
    2616:	fe 01       	movw	r30, r28
    2618:	ec 59       	subi	r30, 0x9C	; 156
    261a:	ff 4f       	sbci	r31, 0xFF	; 255
    261c:	80 81       	ld	r24, Z
    261e:	82 95       	swap	r24
    2620:	8f 70       	andi	r24, 0x0F	; 15
    2622:	89 2b       	or	r24, r25
    2624:	fe 01       	movw	r30, r28
    2626:	ed 59       	subi	r30, 0x9D	; 157
    2628:	ff 4f       	sbci	r31, 0xFF	; 255
    262a:	80 83       	st	Z, r24
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    262c:	fe 01       	movw	r30, r28
    262e:	ed 59       	subi	r30, 0x9D	; 157
    2630:	ff 4f       	sbci	r31, 0xFF	; 255
    2632:	80 e0       	ldi	r24, 0x00	; 0
    2634:	60 81       	ld	r22, Z
    2636:	0e 94 86 0c 	call	0x190c	; 0x190c <GPIO_writePort>
    263a:	fe 01       	movw	r30, r28
    263c:	ed 5b       	subi	r30, 0xBD	; 189
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	a0 e8       	ldi	r26, 0x80	; 128
    2646:	bf e3       	ldi	r27, 0x3F	; 63
    2648:	80 83       	st	Z, r24
    264a:	91 83       	std	Z+1, r25	; 0x01
    264c:	a2 83       	std	Z+2, r26	; 0x02
    264e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2650:	8e 01       	movw	r16, r28
    2652:	01 5c       	subi	r16, 0xC1	; 193
    2654:	1f 4f       	sbci	r17, 0xFF	; 255
    2656:	fe 01       	movw	r30, r28
    2658:	ed 5b       	subi	r30, 0xBD	; 189
    265a:	ff 4f       	sbci	r31, 0xFF	; 255
    265c:	60 81       	ld	r22, Z
    265e:	71 81       	ldd	r23, Z+1	; 0x01
    2660:	82 81       	ldd	r24, Z+2	; 0x02
    2662:	93 81       	ldd	r25, Z+3	; 0x03
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	4a e7       	ldi	r20, 0x7A	; 122
    266a:	53 e4       	ldi	r21, 0x43	; 67
    266c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	f8 01       	movw	r30, r16
    2676:	80 83       	st	Z, r24
    2678:	91 83       	std	Z+1, r25	; 0x01
    267a:	a2 83       	std	Z+2, r26	; 0x02
    267c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    267e:	fe 01       	movw	r30, r28
    2680:	ff 96       	adiw	r30, 0x3f	; 63
    2682:	60 81       	ld	r22, Z
    2684:	71 81       	ldd	r23, Z+1	; 0x01
    2686:	82 81       	ldd	r24, Z+2	; 0x02
    2688:	93 81       	ldd	r25, Z+3	; 0x03
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	40 e8       	ldi	r20, 0x80	; 128
    2690:	5f e3       	ldi	r21, 0x3F	; 63
    2692:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2696:	88 23       	and	r24, r24
    2698:	2c f4       	brge	.+10     	; 0x26a4 <LCD_displayCharacter+0x3bc>
		__ticks = 1;
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	9e af       	std	Y+62, r25	; 0x3e
    26a0:	8d af       	std	Y+61, r24	; 0x3d
    26a2:	46 c0       	rjmp	.+140    	; 0x2730 <LCD_displayCharacter+0x448>
	else if (__tmp > 65535)
    26a4:	fe 01       	movw	r30, r28
    26a6:	ff 96       	adiw	r30, 0x3f	; 63
    26a8:	60 81       	ld	r22, Z
    26aa:	71 81       	ldd	r23, Z+1	; 0x01
    26ac:	82 81       	ldd	r24, Z+2	; 0x02
    26ae:	93 81       	ldd	r25, Z+3	; 0x03
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	3f ef       	ldi	r19, 0xFF	; 255
    26b4:	4f e7       	ldi	r20, 0x7F	; 127
    26b6:	57 e4       	ldi	r21, 0x47	; 71
    26b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26bc:	18 16       	cp	r1, r24
    26be:	64 f5       	brge	.+88     	; 0x2718 <LCD_displayCharacter+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c0:	fe 01       	movw	r30, r28
    26c2:	ed 5b       	subi	r30, 0xBD	; 189
    26c4:	ff 4f       	sbci	r31, 0xFF	; 255
    26c6:	60 81       	ld	r22, Z
    26c8:	71 81       	ldd	r23, Z+1	; 0x01
    26ca:	82 81       	ldd	r24, Z+2	; 0x02
    26cc:	93 81       	ldd	r25, Z+3	; 0x03
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	40 e2       	ldi	r20, 0x20	; 32
    26d4:	51 e4       	ldi	r21, 0x41	; 65
    26d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	bc 01       	movw	r22, r24
    26e0:	cd 01       	movw	r24, r26
    26e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	9e af       	std	Y+62, r25	; 0x3e
    26ec:	8d af       	std	Y+61, r24	; 0x3d
    26ee:	0f c0       	rjmp	.+30     	; 0x270e <LCD_displayCharacter+0x426>
    26f0:	89 e1       	ldi	r24, 0x19	; 25
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	9c af       	std	Y+60, r25	; 0x3c
    26f6:	8b af       	std	Y+59, r24	; 0x3b
    26f8:	8b ad       	ldd	r24, Y+59	; 0x3b
    26fa:	9c ad       	ldd	r25, Y+60	; 0x3c
    26fc:	01 97       	sbiw	r24, 0x01	; 1
    26fe:	f1 f7       	brne	.-4      	; 0x26fc <LCD_displayCharacter+0x414>
    2700:	9c af       	std	Y+60, r25	; 0x3c
    2702:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2704:	8d ad       	ldd	r24, Y+61	; 0x3d
    2706:	9e ad       	ldd	r25, Y+62	; 0x3e
    2708:	01 97       	sbiw	r24, 0x01	; 1
    270a:	9e af       	std	Y+62, r25	; 0x3e
    270c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    270e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2710:	9e ad       	ldd	r25, Y+62	; 0x3e
    2712:	00 97       	sbiw	r24, 0x00	; 0
    2714:	69 f7       	brne	.-38     	; 0x26f0 <LCD_displayCharacter+0x408>
    2716:	16 c0       	rjmp	.+44     	; 0x2744 <LCD_displayCharacter+0x45c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2718:	fe 01       	movw	r30, r28
    271a:	ff 96       	adiw	r30, 0x3f	; 63
    271c:	60 81       	ld	r22, Z
    271e:	71 81       	ldd	r23, Z+1	; 0x01
    2720:	82 81       	ldd	r24, Z+2	; 0x02
    2722:	93 81       	ldd	r25, Z+3	; 0x03
    2724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	9e af       	std	Y+62, r25	; 0x3e
    272e:	8d af       	std	Y+61, r24	; 0x3d
    2730:	8d ad       	ldd	r24, Y+61	; 0x3d
    2732:	9e ad       	ldd	r25, Y+62	; 0x3e
    2734:	9a af       	std	Y+58, r25	; 0x3a
    2736:	89 af       	std	Y+57, r24	; 0x39
    2738:	89 ad       	ldd	r24, Y+57	; 0x39
    273a:	9a ad       	ldd	r25, Y+58	; 0x3a
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	f1 f7       	brne	.-4      	; 0x273c <LCD_displayCharacter+0x454>
    2740:	9a af       	std	Y+58, r25	; 0x3a
    2742:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	65 e0       	ldi	r22, 0x05	; 5
    2748:	40 e0       	ldi	r20, 0x00	; 0
    274a:	0e 94 bc 0a 	call	0x1578	; 0x1578 <GPIO_writePin>
    274e:	80 e0       	ldi	r24, 0x00	; 0
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	a0 e8       	ldi	r26, 0x80	; 128
    2754:	bf e3       	ldi	r27, 0x3F	; 63
    2756:	8d ab       	std	Y+53, r24	; 0x35
    2758:	9e ab       	std	Y+54, r25	; 0x36
    275a:	af ab       	std	Y+55, r26	; 0x37
    275c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    275e:	6d a9       	ldd	r22, Y+53	; 0x35
    2760:	7e a9       	ldd	r23, Y+54	; 0x36
    2762:	8f a9       	ldd	r24, Y+55	; 0x37
    2764:	98 ad       	ldd	r25, Y+56	; 0x38
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	4a e7       	ldi	r20, 0x7A	; 122
    276c:	53 e4       	ldi	r21, 0x43	; 67
    276e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	89 ab       	std	Y+49, r24	; 0x31
    2778:	9a ab       	std	Y+50, r25	; 0x32
    277a:	ab ab       	std	Y+51, r26	; 0x33
    277c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    277e:	69 a9       	ldd	r22, Y+49	; 0x31
    2780:	7a a9       	ldd	r23, Y+50	; 0x32
    2782:	8b a9       	ldd	r24, Y+51	; 0x33
    2784:	9c a9       	ldd	r25, Y+52	; 0x34
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	40 e8       	ldi	r20, 0x80	; 128
    278c:	5f e3       	ldi	r21, 0x3F	; 63
    278e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2792:	88 23       	and	r24, r24
    2794:	2c f4       	brge	.+10     	; 0x27a0 <LCD_displayCharacter+0x4b8>
		__ticks = 1;
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	98 ab       	std	Y+48, r25	; 0x30
    279c:	8f a7       	std	Y+47, r24	; 0x2f
    279e:	3f c0       	rjmp	.+126    	; 0x281e <LCD_displayCharacter+0x536>
	else if (__tmp > 65535)
    27a0:	69 a9       	ldd	r22, Y+49	; 0x31
    27a2:	7a a9       	ldd	r23, Y+50	; 0x32
    27a4:	8b a9       	ldd	r24, Y+51	; 0x33
    27a6:	9c a9       	ldd	r25, Y+52	; 0x34
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	3f ef       	ldi	r19, 0xFF	; 255
    27ac:	4f e7       	ldi	r20, 0x7F	; 127
    27ae:	57 e4       	ldi	r21, 0x47	; 71
    27b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27b4:	18 16       	cp	r1, r24
    27b6:	4c f5       	brge	.+82     	; 0x280a <LCD_displayCharacter+0x522>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b8:	6d a9       	ldd	r22, Y+53	; 0x35
    27ba:	7e a9       	ldd	r23, Y+54	; 0x36
    27bc:	8f a9       	ldd	r24, Y+55	; 0x37
    27be:	98 ad       	ldd	r25, Y+56	; 0x38
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	40 e2       	ldi	r20, 0x20	; 32
    27c6:	51 e4       	ldi	r21, 0x41	; 65
    27c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	bc 01       	movw	r22, r24
    27d2:	cd 01       	movw	r24, r26
    27d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	98 ab       	std	Y+48, r25	; 0x30
    27de:	8f a7       	std	Y+47, r24	; 0x2f
    27e0:	0f c0       	rjmp	.+30     	; 0x2800 <LCD_displayCharacter+0x518>
    27e2:	89 e1       	ldi	r24, 0x19	; 25
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	9e a7       	std	Y+46, r25	; 0x2e
    27e8:	8d a7       	std	Y+45, r24	; 0x2d
    27ea:	8d a5       	ldd	r24, Y+45	; 0x2d
    27ec:	9e a5       	ldd	r25, Y+46	; 0x2e
    27ee:	01 97       	sbiw	r24, 0x01	; 1
    27f0:	f1 f7       	brne	.-4      	; 0x27ee <LCD_displayCharacter+0x506>
    27f2:	9e a7       	std	Y+46, r25	; 0x2e
    27f4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    27f8:	98 a9       	ldd	r25, Y+48	; 0x30
    27fa:	01 97       	sbiw	r24, 0x01	; 1
    27fc:	98 ab       	std	Y+48, r25	; 0x30
    27fe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2800:	8f a5       	ldd	r24, Y+47	; 0x2f
    2802:	98 a9       	ldd	r25, Y+48	; 0x30
    2804:	00 97       	sbiw	r24, 0x00	; 0
    2806:	69 f7       	brne	.-38     	; 0x27e2 <LCD_displayCharacter+0x4fa>
    2808:	14 c0       	rjmp	.+40     	; 0x2832 <LCD_displayCharacter+0x54a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    280a:	69 a9       	ldd	r22, Y+49	; 0x31
    280c:	7a a9       	ldd	r23, Y+50	; 0x32
    280e:	8b a9       	ldd	r24, Y+51	; 0x33
    2810:	9c a9       	ldd	r25, Y+52	; 0x34
    2812:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	98 ab       	std	Y+48, r25	; 0x30
    281c:	8f a7       	std	Y+47, r24	; 0x2f
    281e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2820:	98 a9       	ldd	r25, Y+48	; 0x30
    2822:	9c a7       	std	Y+44, r25	; 0x2c
    2824:	8b a7       	std	Y+43, r24	; 0x2b
    2826:	8b a5       	ldd	r24, Y+43	; 0x2b
    2828:	9c a5       	ldd	r25, Y+44	; 0x2c
    282a:	01 97       	sbiw	r24, 0x01	; 1
    282c:	f1 f7       	brne	.-4      	; 0x282a <LCD_displayCharacter+0x542>
    282e:	9c a7       	std	Y+44, r25	; 0x2c
    2830:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	65 e0       	ldi	r22, 0x05	; 5
    2836:	41 e0       	ldi	r20, 0x01	; 1
    2838:	0e 94 bc 0a 	call	0x1578	; 0x1578 <GPIO_writePin>
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	a0 e8       	ldi	r26, 0x80	; 128
    2842:	bf e3       	ldi	r27, 0x3F	; 63
    2844:	8f a3       	std	Y+39, r24	; 0x27
    2846:	98 a7       	std	Y+40, r25	; 0x28
    2848:	a9 a7       	std	Y+41, r26	; 0x29
    284a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    284c:	6f a1       	ldd	r22, Y+39	; 0x27
    284e:	78 a5       	ldd	r23, Y+40	; 0x28
    2850:	89 a5       	ldd	r24, Y+41	; 0x29
    2852:	9a a5       	ldd	r25, Y+42	; 0x2a
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	4a e7       	ldi	r20, 0x7A	; 122
    285a:	53 e4       	ldi	r21, 0x43	; 67
    285c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2860:	dc 01       	movw	r26, r24
    2862:	cb 01       	movw	r24, r22
    2864:	8b a3       	std	Y+35, r24	; 0x23
    2866:	9c a3       	std	Y+36, r25	; 0x24
    2868:	ad a3       	std	Y+37, r26	; 0x25
    286a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    286c:	6b a1       	ldd	r22, Y+35	; 0x23
    286e:	7c a1       	ldd	r23, Y+36	; 0x24
    2870:	8d a1       	ldd	r24, Y+37	; 0x25
    2872:	9e a1       	ldd	r25, Y+38	; 0x26
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	40 e8       	ldi	r20, 0x80	; 128
    287a:	5f e3       	ldi	r21, 0x3F	; 63
    287c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2880:	88 23       	and	r24, r24
    2882:	2c f4       	brge	.+10     	; 0x288e <LCD_displayCharacter+0x5a6>
		__ticks = 1;
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	9a a3       	std	Y+34, r25	; 0x22
    288a:	89 a3       	std	Y+33, r24	; 0x21
    288c:	3f c0       	rjmp	.+126    	; 0x290c <LCD_displayCharacter+0x624>
	else if (__tmp > 65535)
    288e:	6b a1       	ldd	r22, Y+35	; 0x23
    2890:	7c a1       	ldd	r23, Y+36	; 0x24
    2892:	8d a1       	ldd	r24, Y+37	; 0x25
    2894:	9e a1       	ldd	r25, Y+38	; 0x26
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	3f ef       	ldi	r19, 0xFF	; 255
    289a:	4f e7       	ldi	r20, 0x7F	; 127
    289c:	57 e4       	ldi	r21, 0x47	; 71
    289e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28a2:	18 16       	cp	r1, r24
    28a4:	4c f5       	brge	.+82     	; 0x28f8 <LCD_displayCharacter+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a6:	6f a1       	ldd	r22, Y+39	; 0x27
    28a8:	78 a5       	ldd	r23, Y+40	; 0x28
    28aa:	89 a5       	ldd	r24, Y+41	; 0x29
    28ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	40 e2       	ldi	r20, 0x20	; 32
    28b4:	51 e4       	ldi	r21, 0x41	; 65
    28b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	bc 01       	movw	r22, r24
    28c0:	cd 01       	movw	r24, r26
    28c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c6:	dc 01       	movw	r26, r24
    28c8:	cb 01       	movw	r24, r22
    28ca:	9a a3       	std	Y+34, r25	; 0x22
    28cc:	89 a3       	std	Y+33, r24	; 0x21
    28ce:	0f c0       	rjmp	.+30     	; 0x28ee <LCD_displayCharacter+0x606>
    28d0:	89 e1       	ldi	r24, 0x19	; 25
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	98 a3       	std	Y+32, r25	; 0x20
    28d6:	8f 8f       	std	Y+31, r24	; 0x1f
    28d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28da:	98 a1       	ldd	r25, Y+32	; 0x20
    28dc:	01 97       	sbiw	r24, 0x01	; 1
    28de:	f1 f7       	brne	.-4      	; 0x28dc <LCD_displayCharacter+0x5f4>
    28e0:	98 a3       	std	Y+32, r25	; 0x20
    28e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e4:	89 a1       	ldd	r24, Y+33	; 0x21
    28e6:	9a a1       	ldd	r25, Y+34	; 0x22
    28e8:	01 97       	sbiw	r24, 0x01	; 1
    28ea:	9a a3       	std	Y+34, r25	; 0x22
    28ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ee:	89 a1       	ldd	r24, Y+33	; 0x21
    28f0:	9a a1       	ldd	r25, Y+34	; 0x22
    28f2:	00 97       	sbiw	r24, 0x00	; 0
    28f4:	69 f7       	brne	.-38     	; 0x28d0 <LCD_displayCharacter+0x5e8>
    28f6:	14 c0       	rjmp	.+40     	; 0x2920 <LCD_displayCharacter+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f8:	6b a1       	ldd	r22, Y+35	; 0x23
    28fa:	7c a1       	ldd	r23, Y+36	; 0x24
    28fc:	8d a1       	ldd	r24, Y+37	; 0x25
    28fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2900:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2904:	dc 01       	movw	r26, r24
    2906:	cb 01       	movw	r24, r22
    2908:	9a a3       	std	Y+34, r25	; 0x22
    290a:	89 a3       	std	Y+33, r24	; 0x21
    290c:	89 a1       	ldd	r24, Y+33	; 0x21
    290e:	9a a1       	ldd	r25, Y+34	; 0x22
    2910:	9e 8f       	std	Y+30, r25	; 0x1e
    2912:	8d 8f       	std	Y+29, r24	; 0x1d
    2914:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2916:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2918:	01 97       	sbiw	r24, 0x01	; 1
    291a:	f1 f7       	brne	.-4      	; 0x2918 <LCD_displayCharacter+0x630>
    291c:	9e 8f       	std	Y+30, r25	; 0x1e
    291e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the first 4 bits of the required data to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    2920:	80 e0       	ldi	r24, 0x00	; 0
    2922:	0e 94 ca 0c 	call	0x1994	; 0x1994 <GPIO_readPort>
    2926:	fe 01       	movw	r30, r28
    2928:	ed 59       	subi	r30, 0x9D	; 157
    292a:	ff 4f       	sbci	r31, 0xFF	; 255
    292c:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | ((data & 0x0F) << 4);
#else
	lcd_port_value = (lcd_port_value & 0xF0) | (data & 0x0F);
    292e:	fe 01       	movw	r30, r28
    2930:	ed 59       	subi	r30, 0x9D	; 157
    2932:	ff 4f       	sbci	r31, 0xFF	; 255
    2934:	80 81       	ld	r24, Z
    2936:	98 2f       	mov	r25, r24
    2938:	90 7f       	andi	r25, 0xF0	; 240
    293a:	fe 01       	movw	r30, r28
    293c:	ec 59       	subi	r30, 0x9C	; 156
    293e:	ff 4f       	sbci	r31, 0xFF	; 255
    2940:	80 81       	ld	r24, Z
    2942:	8f 70       	andi	r24, 0x0F	; 15
    2944:	89 2b       	or	r24, r25
    2946:	fe 01       	movw	r30, r28
    2948:	ed 59       	subi	r30, 0x9D	; 157
    294a:	ff 4f       	sbci	r31, 0xFF	; 255
    294c:	80 83       	st	Z, r24
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    294e:	fe 01       	movw	r30, r28
    2950:	ed 59       	subi	r30, 0x9D	; 157
    2952:	ff 4f       	sbci	r31, 0xFF	; 255
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	60 81       	ld	r22, Z
    2958:	0e 94 86 0c 	call	0x190c	; 0x190c <GPIO_writePort>
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	a0 e8       	ldi	r26, 0x80	; 128
    2962:	bf e3       	ldi	r27, 0x3F	; 63
    2964:	89 8f       	std	Y+25, r24	; 0x19
    2966:	9a 8f       	std	Y+26, r25	; 0x1a
    2968:	ab 8f       	std	Y+27, r26	; 0x1b
    296a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    296c:	69 8d       	ldd	r22, Y+25	; 0x19
    296e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2970:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2972:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	4a e7       	ldi	r20, 0x7A	; 122
    297a:	53 e4       	ldi	r21, 0x43	; 67
    297c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	8d 8b       	std	Y+21, r24	; 0x15
    2986:	9e 8b       	std	Y+22, r25	; 0x16
    2988:	af 8b       	std	Y+23, r26	; 0x17
    298a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    298c:	6d 89       	ldd	r22, Y+21	; 0x15
    298e:	7e 89       	ldd	r23, Y+22	; 0x16
    2990:	8f 89       	ldd	r24, Y+23	; 0x17
    2992:	98 8d       	ldd	r25, Y+24	; 0x18
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	40 e8       	ldi	r20, 0x80	; 128
    299a:	5f e3       	ldi	r21, 0x3F	; 63
    299c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29a0:	88 23       	and	r24, r24
    29a2:	2c f4       	brge	.+10     	; 0x29ae <LCD_displayCharacter+0x6c6>
		__ticks = 1;
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	9c 8b       	std	Y+20, r25	; 0x14
    29aa:	8b 8b       	std	Y+19, r24	; 0x13
    29ac:	3f c0       	rjmp	.+126    	; 0x2a2c <LCD_displayCharacter+0x744>
	else if (__tmp > 65535)
    29ae:	6d 89       	ldd	r22, Y+21	; 0x15
    29b0:	7e 89       	ldd	r23, Y+22	; 0x16
    29b2:	8f 89       	ldd	r24, Y+23	; 0x17
    29b4:	98 8d       	ldd	r25, Y+24	; 0x18
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	3f ef       	ldi	r19, 0xFF	; 255
    29ba:	4f e7       	ldi	r20, 0x7F	; 127
    29bc:	57 e4       	ldi	r21, 0x47	; 71
    29be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29c2:	18 16       	cp	r1, r24
    29c4:	4c f5       	brge	.+82     	; 0x2a18 <LCD_displayCharacter+0x730>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c6:	69 8d       	ldd	r22, Y+25	; 0x19
    29c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	40 e2       	ldi	r20, 0x20	; 32
    29d4:	51 e4       	ldi	r21, 0x41	; 65
    29d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	bc 01       	movw	r22, r24
    29e0:	cd 01       	movw	r24, r26
    29e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	9c 8b       	std	Y+20, r25	; 0x14
    29ec:	8b 8b       	std	Y+19, r24	; 0x13
    29ee:	0f c0       	rjmp	.+30     	; 0x2a0e <LCD_displayCharacter+0x726>
    29f0:	89 e1       	ldi	r24, 0x19	; 25
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	9a 8b       	std	Y+18, r25	; 0x12
    29f6:	89 8b       	std	Y+17, r24	; 0x11
    29f8:	89 89       	ldd	r24, Y+17	; 0x11
    29fa:	9a 89       	ldd	r25, Y+18	; 0x12
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	f1 f7       	brne	.-4      	; 0x29fc <LCD_displayCharacter+0x714>
    2a00:	9a 8b       	std	Y+18, r25	; 0x12
    2a02:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a04:	8b 89       	ldd	r24, Y+19	; 0x13
    2a06:	9c 89       	ldd	r25, Y+20	; 0x14
    2a08:	01 97       	sbiw	r24, 0x01	; 1
    2a0a:	9c 8b       	std	Y+20, r25	; 0x14
    2a0c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a0e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a10:	9c 89       	ldd	r25, Y+20	; 0x14
    2a12:	00 97       	sbiw	r24, 0x00	; 0
    2a14:	69 f7       	brne	.-38     	; 0x29f0 <LCD_displayCharacter+0x708>
    2a16:	14 c0       	rjmp	.+40     	; 0x2a40 <LCD_displayCharacter+0x758>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a18:	6d 89       	ldd	r22, Y+21	; 0x15
    2a1a:	7e 89       	ldd	r23, Y+22	; 0x16
    2a1c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a1e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	9c 8b       	std	Y+20, r25	; 0x14
    2a2a:	8b 8b       	std	Y+19, r24	; 0x13
    2a2c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a2e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a30:	98 8b       	std	Y+16, r25	; 0x10
    2a32:	8f 87       	std	Y+15, r24	; 0x0f
    2a34:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a36:	98 89       	ldd	r25, Y+16	; 0x10
    2a38:	01 97       	sbiw	r24, 0x01	; 1
    2a3a:	f1 f7       	brne	.-4      	; 0x2a38 <LCD_displayCharacter+0x750>
    2a3c:	98 8b       	std	Y+16, r25	; 0x10
    2a3e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2a40:	80 e0       	ldi	r24, 0x00	; 0
    2a42:	65 e0       	ldi	r22, 0x05	; 5
    2a44:	40 e0       	ldi	r20, 0x00	; 0
    2a46:	0e 94 bc 0a 	call	0x1578	; 0x1578 <GPIO_writePin>
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	a0 e8       	ldi	r26, 0x80	; 128
    2a50:	bf e3       	ldi	r27, 0x3F	; 63
    2a52:	8b 87       	std	Y+11, r24	; 0x0b
    2a54:	9c 87       	std	Y+12, r25	; 0x0c
    2a56:	ad 87       	std	Y+13, r26	; 0x0d
    2a58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	4a e7       	ldi	r20, 0x7A	; 122
    2a68:	53 e4       	ldi	r21, 0x43	; 67
    2a6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	8f 83       	std	Y+7, r24	; 0x07
    2a74:	98 87       	std	Y+8, r25	; 0x08
    2a76:	a9 87       	std	Y+9, r26	; 0x09
    2a78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a7c:	78 85       	ldd	r23, Y+8	; 0x08
    2a7e:	89 85       	ldd	r24, Y+9	; 0x09
    2a80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	40 e8       	ldi	r20, 0x80	; 128
    2a88:	5f e3       	ldi	r21, 0x3F	; 63
    2a8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a8e:	88 23       	and	r24, r24
    2a90:	2c f4       	brge	.+10     	; 0x2a9c <LCD_displayCharacter+0x7b4>
		__ticks = 1;
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	9e 83       	std	Y+6, r25	; 0x06
    2a98:	8d 83       	std	Y+5, r24	; 0x05
    2a9a:	3f c0       	rjmp	.+126    	; 0x2b1a <LCD_displayCharacter+0x832>
	else if (__tmp > 65535)
    2a9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a9e:	78 85       	ldd	r23, Y+8	; 0x08
    2aa0:	89 85       	ldd	r24, Y+9	; 0x09
    2aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	3f ef       	ldi	r19, 0xFF	; 255
    2aa8:	4f e7       	ldi	r20, 0x7F	; 127
    2aaa:	57 e4       	ldi	r21, 0x47	; 71
    2aac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ab0:	18 16       	cp	r1, r24
    2ab2:	4c f5       	brge	.+82     	; 0x2b06 <LCD_displayCharacter+0x81e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ab6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ab8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aba:	9e 85       	ldd	r25, Y+14	; 0x0e
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	40 e2       	ldi	r20, 0x20	; 32
    2ac2:	51 e4       	ldi	r21, 0x41	; 65
    2ac4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	bc 01       	movw	r22, r24
    2ace:	cd 01       	movw	r24, r26
    2ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	9e 83       	std	Y+6, r25	; 0x06
    2ada:	8d 83       	std	Y+5, r24	; 0x05
    2adc:	0f c0       	rjmp	.+30     	; 0x2afc <LCD_displayCharacter+0x814>
    2ade:	89 e1       	ldi	r24, 0x19	; 25
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	9c 83       	std	Y+4, r25	; 0x04
    2ae4:	8b 83       	std	Y+3, r24	; 0x03
    2ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aea:	01 97       	sbiw	r24, 0x01	; 1
    2aec:	f1 f7       	brne	.-4      	; 0x2aea <LCD_displayCharacter+0x802>
    2aee:	9c 83       	std	Y+4, r25	; 0x04
    2af0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af2:	8d 81       	ldd	r24, Y+5	; 0x05
    2af4:	9e 81       	ldd	r25, Y+6	; 0x06
    2af6:	01 97       	sbiw	r24, 0x01	; 1
    2af8:	9e 83       	std	Y+6, r25	; 0x06
    2afa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2afc:	8d 81       	ldd	r24, Y+5	; 0x05
    2afe:	9e 81       	ldd	r25, Y+6	; 0x06
    2b00:	00 97       	sbiw	r24, 0x00	; 0
    2b02:	69 f7       	brne	.-38     	; 0x2ade <LCD_displayCharacter+0x7f6>
    2b04:	14 c0       	rjmp	.+40     	; 0x2b2e <LCD_displayCharacter+0x846>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b06:	6f 81       	ldd	r22, Y+7	; 0x07
    2b08:	78 85       	ldd	r23, Y+8	; 0x08
    2b0a:	89 85       	ldd	r24, Y+9	; 0x09
    2b0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	9e 83       	std	Y+6, r25	; 0x06
    2b18:	8d 83       	std	Y+5, r24	; 0x05
    2b1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b1e:	9a 83       	std	Y+2, r25	; 0x02
    2b20:	89 83       	std	Y+1, r24	; 0x01
    2b22:	89 81       	ldd	r24, Y+1	; 0x01
    2b24:	9a 81       	ldd	r25, Y+2	; 0x02
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	f1 f7       	brne	.-4      	; 0x2b26 <LCD_displayCharacter+0x83e>
    2b2a:	9a 83       	std	Y+2, r25	; 0x02
    2b2c:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2b2e:	cc 59       	subi	r28, 0x9C	; 156
    2b30:	df 4f       	sbci	r29, 0xFF	; 255
    2b32:	0f b6       	in	r0, 0x3f	; 63
    2b34:	f8 94       	cli
    2b36:	de bf       	out	0x3e, r29	; 62
    2b38:	0f be       	out	0x3f, r0	; 63
    2b3a:	cd bf       	out	0x3d, r28	; 61
    2b3c:	cf 91       	pop	r28
    2b3e:	df 91       	pop	r29
    2b40:	1f 91       	pop	r17
    2b42:	0f 91       	pop	r16
    2b44:	08 95       	ret

00002b46 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2b46:	df 93       	push	r29
    2b48:	cf 93       	push	r28
    2b4a:	00 d0       	rcall	.+0      	; 0x2b4c <LCD_displayString+0x6>
    2b4c:	0f 92       	push	r0
    2b4e:	cd b7       	in	r28, 0x3d	; 61
    2b50:	de b7       	in	r29, 0x3e	; 62
    2b52:	9b 83       	std	Y+3, r25	; 0x03
    2b54:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2b56:	19 82       	std	Y+1, r1	; 0x01
    2b58:	0e c0       	rjmp	.+28     	; 0x2b76 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2b5a:	89 81       	ldd	r24, Y+1	; 0x01
    2b5c:	28 2f       	mov	r18, r24
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	8a 81       	ldd	r24, Y+2	; 0x02
    2b62:	9b 81       	ldd	r25, Y+3	; 0x03
    2b64:	fc 01       	movw	r30, r24
    2b66:	e2 0f       	add	r30, r18
    2b68:	f3 1f       	adc	r31, r19
    2b6a:	80 81       	ld	r24, Z
    2b6c:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_displayCharacter>
		i++;
    2b70:	89 81       	ldd	r24, Y+1	; 0x01
    2b72:	8f 5f       	subi	r24, 0xFF	; 255
    2b74:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2b76:	89 81       	ldd	r24, Y+1	; 0x01
    2b78:	28 2f       	mov	r18, r24
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b80:	fc 01       	movw	r30, r24
    2b82:	e2 0f       	add	r30, r18
    2b84:	f3 1f       	adc	r31, r19
    2b86:	80 81       	ld	r24, Z
    2b88:	88 23       	and	r24, r24
    2b8a:	39 f7       	brne	.-50     	; 0x2b5a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2b8c:	0f 90       	pop	r0
    2b8e:	0f 90       	pop	r0
    2b90:	0f 90       	pop	r0
    2b92:	cf 91       	pop	r28
    2b94:	df 91       	pop	r29
    2b96:	08 95       	ret

00002b98 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2b98:	df 93       	push	r29
    2b9a:	cf 93       	push	r28
    2b9c:	00 d0       	rcall	.+0      	; 0x2b9e <LCD_moveCursor+0x6>
    2b9e:	00 d0       	rcall	.+0      	; 0x2ba0 <LCD_moveCursor+0x8>
    2ba0:	0f 92       	push	r0
    2ba2:	cd b7       	in	r28, 0x3d	; 61
    2ba4:	de b7       	in	r29, 0x3e	; 62
    2ba6:	8a 83       	std	Y+2, r24	; 0x02
    2ba8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2baa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bac:	28 2f       	mov	r18, r24
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	3d 83       	std	Y+5, r19	; 0x05
    2bb2:	2c 83       	std	Y+4, r18	; 0x04
    2bb4:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb6:	9d 81       	ldd	r25, Y+5	; 0x05
    2bb8:	81 30       	cpi	r24, 0x01	; 1
    2bba:	91 05       	cpc	r25, r1
    2bbc:	c1 f0       	breq	.+48     	; 0x2bee <LCD_moveCursor+0x56>
    2bbe:	2c 81       	ldd	r18, Y+4	; 0x04
    2bc0:	3d 81       	ldd	r19, Y+5	; 0x05
    2bc2:	22 30       	cpi	r18, 0x02	; 2
    2bc4:	31 05       	cpc	r19, r1
    2bc6:	2c f4       	brge	.+10     	; 0x2bd2 <LCD_moveCursor+0x3a>
    2bc8:	8c 81       	ldd	r24, Y+4	; 0x04
    2bca:	9d 81       	ldd	r25, Y+5	; 0x05
    2bcc:	00 97       	sbiw	r24, 0x00	; 0
    2bce:	61 f0       	breq	.+24     	; 0x2be8 <LCD_moveCursor+0x50>
    2bd0:	19 c0       	rjmp	.+50     	; 0x2c04 <LCD_moveCursor+0x6c>
    2bd2:	2c 81       	ldd	r18, Y+4	; 0x04
    2bd4:	3d 81       	ldd	r19, Y+5	; 0x05
    2bd6:	22 30       	cpi	r18, 0x02	; 2
    2bd8:	31 05       	cpc	r19, r1
    2bda:	69 f0       	breq	.+26     	; 0x2bf6 <LCD_moveCursor+0x5e>
    2bdc:	8c 81       	ldd	r24, Y+4	; 0x04
    2bde:	9d 81       	ldd	r25, Y+5	; 0x05
    2be0:	83 30       	cpi	r24, 0x03	; 3
    2be2:	91 05       	cpc	r25, r1
    2be4:	61 f0       	breq	.+24     	; 0x2bfe <LCD_moveCursor+0x66>
    2be6:	0e c0       	rjmp	.+28     	; 0x2c04 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2be8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bea:	89 83       	std	Y+1, r24	; 0x01
    2bec:	0b c0       	rjmp	.+22     	; 0x2c04 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2bee:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf0:	80 5c       	subi	r24, 0xC0	; 192
    2bf2:	89 83       	std	Y+1, r24	; 0x01
    2bf4:	07 c0       	rjmp	.+14     	; 0x2c04 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf8:	80 5f       	subi	r24, 0xF0	; 240
    2bfa:	89 83       	std	Y+1, r24	; 0x01
    2bfc:	03 c0       	rjmp	.+6      	; 0x2c04 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2c00:	80 5b       	subi	r24, 0xB0	; 176
    2c02:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2c04:	89 81       	ldd	r24, Y+1	; 0x01
    2c06:	80 68       	ori	r24, 0x80	; 128
    2c08:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <LCD_sendCommand>
}
    2c0c:	0f 90       	pop	r0
    2c0e:	0f 90       	pop	r0
    2c10:	0f 90       	pop	r0
    2c12:	0f 90       	pop	r0
    2c14:	0f 90       	pop	r0
    2c16:	cf 91       	pop	r28
    2c18:	df 91       	pop	r29
    2c1a:	08 95       	ret

00002c1c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2c1c:	df 93       	push	r29
    2c1e:	cf 93       	push	r28
    2c20:	00 d0       	rcall	.+0      	; 0x2c22 <LCD_displayStringRowColumn+0x6>
    2c22:	00 d0       	rcall	.+0      	; 0x2c24 <LCD_displayStringRowColumn+0x8>
    2c24:	cd b7       	in	r28, 0x3d	; 61
    2c26:	de b7       	in	r29, 0x3e	; 62
    2c28:	89 83       	std	Y+1, r24	; 0x01
    2c2a:	6a 83       	std	Y+2, r22	; 0x02
    2c2c:	5c 83       	std	Y+4, r21	; 0x04
    2c2e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2c30:	89 81       	ldd	r24, Y+1	; 0x01
    2c32:	6a 81       	ldd	r22, Y+2	; 0x02
    2c34:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2c38:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c3c:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <LCD_displayString>
}
    2c40:	0f 90       	pop	r0
    2c42:	0f 90       	pop	r0
    2c44:	0f 90       	pop	r0
    2c46:	0f 90       	pop	r0
    2c48:	cf 91       	pop	r28
    2c4a:	df 91       	pop	r29
    2c4c:	08 95       	ret

00002c4e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2c4e:	df 93       	push	r29
    2c50:	cf 93       	push	r28
    2c52:	cd b7       	in	r28, 0x3d	; 61
    2c54:	de b7       	in	r29, 0x3e	; 62
    2c56:	62 97       	sbiw	r28, 0x12	; 18
    2c58:	0f b6       	in	r0, 0x3f	; 63
    2c5a:	f8 94       	cli
    2c5c:	de bf       	out	0x3e, r29	; 62
    2c5e:	0f be       	out	0x3f, r0	; 63
    2c60:	cd bf       	out	0x3d, r28	; 61
    2c62:	9a 8b       	std	Y+18, r25	; 0x12
    2c64:	89 8b       	std	Y+17, r24	; 0x11
   char bufff[16]; /* String to hold the ascii result */
   itoa(data,bufff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2c66:	89 89       	ldd	r24, Y+17	; 0x11
    2c68:	9a 89       	ldd	r25, Y+18	; 0x12
    2c6a:	9e 01       	movw	r18, r28
    2c6c:	2f 5f       	subi	r18, 0xFF	; 255
    2c6e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c70:	b9 01       	movw	r22, r18
    2c72:	4a e0       	ldi	r20, 0x0A	; 10
    2c74:	50 e0       	ldi	r21, 0x00	; 0
    2c76:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <itoa>
   LCD_displayString(bufff); /* Display the string */
    2c7a:	ce 01       	movw	r24, r28
    2c7c:	01 96       	adiw	r24, 0x01	; 1
    2c7e:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <LCD_displayString>
}
    2c82:	62 96       	adiw	r28, 0x12	; 18
    2c84:	0f b6       	in	r0, 0x3f	; 63
    2c86:	f8 94       	cli
    2c88:	de bf       	out	0x3e, r29	; 62
    2c8a:	0f be       	out	0x3f, r0	; 63
    2c8c:	cd bf       	out	0x3d, r28	; 61
    2c8e:	cf 91       	pop	r28
    2c90:	df 91       	pop	r29
    2c92:	08 95       	ret

00002c94 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2c94:	df 93       	push	r29
    2c96:	cf 93       	push	r28
    2c98:	cd b7       	in	r28, 0x3d	; 61
    2c9a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <LCD_sendCommand>
}
    2ca2:	cf 91       	pop	r28
    2ca4:	df 91       	pop	r29
    2ca6:	08 95       	ret

00002ca8 <LCD_FloatToString>:
/*
 * Description :
 * Display the required floating value on the screen
 */
void LCD_FloatToString(float n)
{
    2ca8:	0f 93       	push	r16
    2caa:	1f 93       	push	r17
    2cac:	df 93       	push	r29
    2cae:	cf 93       	push	r28
    2cb0:	cd b7       	in	r28, 0x3d	; 61
    2cb2:	de b7       	in	r29, 0x3e	; 62
    2cb4:	c4 54       	subi	r28, 0x44	; 68
    2cb6:	d0 40       	sbci	r29, 0x00	; 0
    2cb8:	0f b6       	in	r0, 0x3f	; 63
    2cba:	f8 94       	cli
    2cbc:	de bf       	out	0x3e, r29	; 62
    2cbe:	0f be       	out	0x3f, r0	; 63
    2cc0:	cd bf       	out	0x3d, r28	; 61
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	ef 5b       	subi	r30, 0xBF	; 191
    2cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc8:	60 83       	st	Z, r22
    2cca:	71 83       	std	Z+1, r23	; 0x01
    2ccc:	82 83       	std	Z+2, r24	; 0x02
    2cce:	93 83       	std	Z+3, r25	; 0x03
	n = ((int)(n * 100 + 0.5) / 100.00);
    2cd0:	fe 01       	movw	r30, r28
    2cd2:	ef 5b       	subi	r30, 0xBF	; 191
    2cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd6:	60 81       	ld	r22, Z
    2cd8:	71 81       	ldd	r23, Z+1	; 0x01
    2cda:	82 81       	ldd	r24, Z+2	; 0x02
    2cdc:	93 81       	ldd	r25, Z+3	; 0x03
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	48 ec       	ldi	r20, 0xC8	; 200
    2ce4:	52 e4       	ldi	r21, 0x42	; 66
    2ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	bc 01       	movw	r22, r24
    2cf0:	cd 01       	movw	r24, r26
    2cf2:	20 e0       	ldi	r18, 0x00	; 0
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	40 e0       	ldi	r20, 0x00	; 0
    2cf8:	5f e3       	ldi	r21, 0x3F	; 63
    2cfa:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2cfe:	dc 01       	movw	r26, r24
    2d00:	cb 01       	movw	r24, r22
    2d02:	bc 01       	movw	r22, r24
    2d04:	cd 01       	movw	r24, r26
    2d06:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	aa 27       	eor	r26, r26
    2d10:	97 fd       	sbrc	r25, 7
    2d12:	a0 95       	com	r26
    2d14:	ba 2f       	mov	r27, r26
    2d16:	bc 01       	movw	r22, r24
    2d18:	cd 01       	movw	r24, r26
    2d1a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2d1e:	dc 01       	movw	r26, r24
    2d20:	cb 01       	movw	r24, r22
    2d22:	8e 01       	movw	r16, r28
    2d24:	0f 5b       	subi	r16, 0xBF	; 191
    2d26:	1f 4f       	sbci	r17, 0xFF	; 255
    2d28:	bc 01       	movw	r22, r24
    2d2a:	cd 01       	movw	r24, r26
    2d2c:	20 e0       	ldi	r18, 0x00	; 0
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	48 ec       	ldi	r20, 0xC8	; 200
    2d32:	52 e4       	ldi	r21, 0x42	; 66
    2d34:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	f8 01       	movw	r30, r16
    2d3e:	80 83       	st	Z, r24
    2d40:	91 83       	std	Z+1, r25	; 0x01
    2d42:	a2 83       	std	Z+2, r26	; 0x02
    2d44:	b3 83       	std	Z+3, r27	; 0x03
	char buff[64];
	snprintf(buff, sizeof(buff), "%d", (int)(n));
    2d46:	fe 01       	movw	r30, r28
    2d48:	ef 5b       	subi	r30, 0xBF	; 191
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	60 81       	ld	r22, Z
    2d4e:	71 81       	ldd	r23, Z+1	; 0x01
    2d50:	82 81       	ldd	r24, Z+2	; 0x02
    2d52:	93 81       	ldd	r25, Z+3	; 0x03
    2d54:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    2d58:	dc 01       	movw	r26, r24
    2d5a:	cb 01       	movw	r24, r22
    2d5c:	9c 01       	movw	r18, r24
    2d5e:	8d b7       	in	r24, 0x3d	; 61
    2d60:	9e b7       	in	r25, 0x3e	; 62
    2d62:	08 97       	sbiw	r24, 0x08	; 8
    2d64:	0f b6       	in	r0, 0x3f	; 63
    2d66:	f8 94       	cli
    2d68:	9e bf       	out	0x3e, r25	; 62
    2d6a:	0f be       	out	0x3f, r0	; 63
    2d6c:	8d bf       	out	0x3d, r24	; 61
    2d6e:	ed b7       	in	r30, 0x3d	; 61
    2d70:	fe b7       	in	r31, 0x3e	; 62
    2d72:	31 96       	adiw	r30, 0x01	; 1
    2d74:	ce 01       	movw	r24, r28
    2d76:	01 96       	adiw	r24, 0x01	; 1
    2d78:	91 83       	std	Z+1, r25	; 0x01
    2d7a:	80 83       	st	Z, r24
    2d7c:	80 e4       	ldi	r24, 0x40	; 64
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	93 83       	std	Z+3, r25	; 0x03
    2d82:	82 83       	std	Z+2, r24	; 0x02
    2d84:	84 e9       	ldi	r24, 0x94	; 148
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	95 83       	std	Z+5, r25	; 0x05
    2d8a:	84 83       	std	Z+4, r24	; 0x04
    2d8c:	37 83       	std	Z+7, r19	; 0x07
    2d8e:	26 83       	std	Z+6, r18	; 0x06
    2d90:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <snprintf>
    2d94:	ed b7       	in	r30, 0x3d	; 61
    2d96:	fe b7       	in	r31, 0x3e	; 62
    2d98:	38 96       	adiw	r30, 0x08	; 8
    2d9a:	0f b6       	in	r0, 0x3f	; 63
    2d9c:	f8 94       	cli
    2d9e:	fe bf       	out	0x3e, r31	; 62
    2da0:	0f be       	out	0x3f, r0	; 63
    2da2:	ed bf       	out	0x3d, r30	; 61
	LCD_displayString(buff);
    2da4:	ce 01       	movw	r24, r28
    2da6:	01 96       	adiw	r24, 0x01	; 1
    2da8:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <LCD_displayString>
	LCD_displayString(".");
    2dac:	87 e9       	ldi	r24, 0x97	; 151
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <LCD_displayString>
	if(n < 0) n = -n;
    2db4:	fe 01       	movw	r30, r28
    2db6:	ef 5b       	subi	r30, 0xBF	; 191
    2db8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dba:	60 81       	ld	r22, Z
    2dbc:	71 81       	ldd	r23, Z+1	; 0x01
    2dbe:	82 81       	ldd	r24, Z+2	; 0x02
    2dc0:	93 81       	ldd	r25, Z+3	; 0x03
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	40 e0       	ldi	r20, 0x00	; 0
    2dc8:	50 e0       	ldi	r21, 0x00	; 0
    2dca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dce:	88 23       	and	r24, r24
    2dd0:	84 f4       	brge	.+32     	; 0x2df2 <LCD_FloatToString+0x14a>
    2dd2:	9e 01       	movw	r18, r28
    2dd4:	2f 5b       	subi	r18, 0xBF	; 191
    2dd6:	3f 4f       	sbci	r19, 0xFF	; 255
    2dd8:	fe 01       	movw	r30, r28
    2dda:	ef 5b       	subi	r30, 0xBF	; 191
    2ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dde:	80 81       	ld	r24, Z
    2de0:	91 81       	ldd	r25, Z+1	; 0x01
    2de2:	a2 81       	ldd	r26, Z+2	; 0x02
    2de4:	b3 81       	ldd	r27, Z+3	; 0x03
    2de6:	b0 58       	subi	r27, 0x80	; 128
    2de8:	f9 01       	movw	r30, r18
    2dea:	80 83       	st	Z, r24
    2dec:	91 83       	std	Z+1, r25	; 0x01
    2dee:	a2 83       	std	Z+2, r26	; 0x02
    2df0:	b3 83       	std	Z+3, r27	; 0x03
	snprintf(buff, sizeof(buff), "%d", (int)(n*100)% 100);
    2df2:	fe 01       	movw	r30, r28
    2df4:	ef 5b       	subi	r30, 0xBF	; 191
    2df6:	ff 4f       	sbci	r31, 0xFF	; 255
    2df8:	60 81       	ld	r22, Z
    2dfa:	71 81       	ldd	r23, Z+1	; 0x01
    2dfc:	82 81       	ldd	r24, Z+2	; 0x02
    2dfe:	93 81       	ldd	r25, Z+3	; 0x03
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	48 ec       	ldi	r20, 0xC8	; 200
    2e06:	52 e4       	ldi	r21, 0x42	; 66
    2e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e0c:	dc 01       	movw	r26, r24
    2e0e:	cb 01       	movw	r24, r22
    2e10:	bc 01       	movw	r22, r24
    2e12:	cd 01       	movw	r24, r26
    2e14:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	24 e6       	ldi	r18, 0x64	; 100
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	b9 01       	movw	r22, r18
    2e22:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <__divmodhi4>
    2e26:	9c 01       	movw	r18, r24
    2e28:	8d b7       	in	r24, 0x3d	; 61
    2e2a:	9e b7       	in	r25, 0x3e	; 62
    2e2c:	08 97       	sbiw	r24, 0x08	; 8
    2e2e:	0f b6       	in	r0, 0x3f	; 63
    2e30:	f8 94       	cli
    2e32:	9e bf       	out	0x3e, r25	; 62
    2e34:	0f be       	out	0x3f, r0	; 63
    2e36:	8d bf       	out	0x3d, r24	; 61
    2e38:	ed b7       	in	r30, 0x3d	; 61
    2e3a:	fe b7       	in	r31, 0x3e	; 62
    2e3c:	31 96       	adiw	r30, 0x01	; 1
    2e3e:	ce 01       	movw	r24, r28
    2e40:	01 96       	adiw	r24, 0x01	; 1
    2e42:	91 83       	std	Z+1, r25	; 0x01
    2e44:	80 83       	st	Z, r24
    2e46:	80 e4       	ldi	r24, 0x40	; 64
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	93 83       	std	Z+3, r25	; 0x03
    2e4c:	82 83       	std	Z+2, r24	; 0x02
    2e4e:	84 e9       	ldi	r24, 0x94	; 148
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	95 83       	std	Z+5, r25	; 0x05
    2e54:	84 83       	std	Z+4, r24	; 0x04
    2e56:	37 83       	std	Z+7, r19	; 0x07
    2e58:	26 83       	std	Z+6, r18	; 0x06
    2e5a:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <snprintf>
    2e5e:	ed b7       	in	r30, 0x3d	; 61
    2e60:	fe b7       	in	r31, 0x3e	; 62
    2e62:	38 96       	adiw	r30, 0x08	; 8
    2e64:	0f b6       	in	r0, 0x3f	; 63
    2e66:	f8 94       	cli
    2e68:	fe bf       	out	0x3e, r31	; 62
    2e6a:	0f be       	out	0x3f, r0	; 63
    2e6c:	ed bf       	out	0x3d, r30	; 61
	LCD_displayString(buff);
    2e6e:	ce 01       	movw	r24, r28
    2e70:	01 96       	adiw	r24, 0x01	; 1
    2e72:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <LCD_displayString>
}
    2e76:	cc 5b       	subi	r28, 0xBC	; 188
    2e78:	df 4f       	sbci	r29, 0xFF	; 255
    2e7a:	0f b6       	in	r0, 0x3f	; 63
    2e7c:	f8 94       	cli
    2e7e:	de bf       	out	0x3e, r29	; 62
    2e80:	0f be       	out	0x3f, r0	; 63
    2e82:	cd bf       	out	0x3d, r28	; 61
    2e84:	cf 91       	pop	r28
    2e86:	df 91       	pop	r29
    2e88:	1f 91       	pop	r17
    2e8a:	0f 91       	pop	r16
    2e8c:	08 95       	ret

00002e8e <__divmodhi4>:
    2e8e:	97 fb       	bst	r25, 7
    2e90:	09 2e       	mov	r0, r25
    2e92:	07 26       	eor	r0, r23
    2e94:	0a d0       	rcall	.+20     	; 0x2eaa <__divmodhi4_neg1>
    2e96:	77 fd       	sbrc	r23, 7
    2e98:	04 d0       	rcall	.+8      	; 0x2ea2 <__divmodhi4_neg2>
    2e9a:	0c d0       	rcall	.+24     	; 0x2eb4 <__udivmodhi4>
    2e9c:	06 d0       	rcall	.+12     	; 0x2eaa <__divmodhi4_neg1>
    2e9e:	00 20       	and	r0, r0
    2ea0:	1a f4       	brpl	.+6      	; 0x2ea8 <__divmodhi4_exit>

00002ea2 <__divmodhi4_neg2>:
    2ea2:	70 95       	com	r23
    2ea4:	61 95       	neg	r22
    2ea6:	7f 4f       	sbci	r23, 0xFF	; 255

00002ea8 <__divmodhi4_exit>:
    2ea8:	08 95       	ret

00002eaa <__divmodhi4_neg1>:
    2eaa:	f6 f7       	brtc	.-4      	; 0x2ea8 <__divmodhi4_exit>
    2eac:	90 95       	com	r25
    2eae:	81 95       	neg	r24
    2eb0:	9f 4f       	sbci	r25, 0xFF	; 255
    2eb2:	08 95       	ret

00002eb4 <__udivmodhi4>:
    2eb4:	aa 1b       	sub	r26, r26
    2eb6:	bb 1b       	sub	r27, r27
    2eb8:	51 e1       	ldi	r21, 0x11	; 17
    2eba:	07 c0       	rjmp	.+14     	; 0x2eca <__udivmodhi4_ep>

00002ebc <__udivmodhi4_loop>:
    2ebc:	aa 1f       	adc	r26, r26
    2ebe:	bb 1f       	adc	r27, r27
    2ec0:	a6 17       	cp	r26, r22
    2ec2:	b7 07       	cpc	r27, r23
    2ec4:	10 f0       	brcs	.+4      	; 0x2eca <__udivmodhi4_ep>
    2ec6:	a6 1b       	sub	r26, r22
    2ec8:	b7 0b       	sbc	r27, r23

00002eca <__udivmodhi4_ep>:
    2eca:	88 1f       	adc	r24, r24
    2ecc:	99 1f       	adc	r25, r25
    2ece:	5a 95       	dec	r21
    2ed0:	a9 f7       	brne	.-22     	; 0x2ebc <__udivmodhi4_loop>
    2ed2:	80 95       	com	r24
    2ed4:	90 95       	com	r25
    2ed6:	bc 01       	movw	r22, r24
    2ed8:	cd 01       	movw	r24, r26
    2eda:	08 95       	ret

00002edc <__prologue_saves__>:
    2edc:	2f 92       	push	r2
    2ede:	3f 92       	push	r3
    2ee0:	4f 92       	push	r4
    2ee2:	5f 92       	push	r5
    2ee4:	6f 92       	push	r6
    2ee6:	7f 92       	push	r7
    2ee8:	8f 92       	push	r8
    2eea:	9f 92       	push	r9
    2eec:	af 92       	push	r10
    2eee:	bf 92       	push	r11
    2ef0:	cf 92       	push	r12
    2ef2:	df 92       	push	r13
    2ef4:	ef 92       	push	r14
    2ef6:	ff 92       	push	r15
    2ef8:	0f 93       	push	r16
    2efa:	1f 93       	push	r17
    2efc:	cf 93       	push	r28
    2efe:	df 93       	push	r29
    2f00:	cd b7       	in	r28, 0x3d	; 61
    2f02:	de b7       	in	r29, 0x3e	; 62
    2f04:	ca 1b       	sub	r28, r26
    2f06:	db 0b       	sbc	r29, r27
    2f08:	0f b6       	in	r0, 0x3f	; 63
    2f0a:	f8 94       	cli
    2f0c:	de bf       	out	0x3e, r29	; 62
    2f0e:	0f be       	out	0x3f, r0	; 63
    2f10:	cd bf       	out	0x3d, r28	; 61
    2f12:	09 94       	ijmp

00002f14 <__epilogue_restores__>:
    2f14:	2a 88       	ldd	r2, Y+18	; 0x12
    2f16:	39 88       	ldd	r3, Y+17	; 0x11
    2f18:	48 88       	ldd	r4, Y+16	; 0x10
    2f1a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f1c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f1e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f20:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f22:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f24:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f26:	b9 84       	ldd	r11, Y+9	; 0x09
    2f28:	c8 84       	ldd	r12, Y+8	; 0x08
    2f2a:	df 80       	ldd	r13, Y+7	; 0x07
    2f2c:	ee 80       	ldd	r14, Y+6	; 0x06
    2f2e:	fd 80       	ldd	r15, Y+5	; 0x05
    2f30:	0c 81       	ldd	r16, Y+4	; 0x04
    2f32:	1b 81       	ldd	r17, Y+3	; 0x03
    2f34:	aa 81       	ldd	r26, Y+2	; 0x02
    2f36:	b9 81       	ldd	r27, Y+1	; 0x01
    2f38:	ce 0f       	add	r28, r30
    2f3a:	d1 1d       	adc	r29, r1
    2f3c:	0f b6       	in	r0, 0x3f	; 63
    2f3e:	f8 94       	cli
    2f40:	de bf       	out	0x3e, r29	; 62
    2f42:	0f be       	out	0x3f, r0	; 63
    2f44:	cd bf       	out	0x3d, r28	; 61
    2f46:	ed 01       	movw	r28, r26
    2f48:	08 95       	ret

00002f4a <itoa>:
    2f4a:	fb 01       	movw	r30, r22
    2f4c:	9f 01       	movw	r18, r30
    2f4e:	e8 94       	clt
    2f50:	42 30       	cpi	r20, 0x02	; 2
    2f52:	c4 f0       	brlt	.+48     	; 0x2f84 <itoa+0x3a>
    2f54:	45 32       	cpi	r20, 0x25	; 37
    2f56:	b4 f4       	brge	.+44     	; 0x2f84 <itoa+0x3a>
    2f58:	4a 30       	cpi	r20, 0x0A	; 10
    2f5a:	29 f4       	brne	.+10     	; 0x2f66 <itoa+0x1c>
    2f5c:	97 fb       	bst	r25, 7
    2f5e:	1e f4       	brtc	.+6      	; 0x2f66 <itoa+0x1c>
    2f60:	90 95       	com	r25
    2f62:	81 95       	neg	r24
    2f64:	9f 4f       	sbci	r25, 0xFF	; 255
    2f66:	64 2f       	mov	r22, r20
    2f68:	77 27       	eor	r23, r23
    2f6a:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <__udivmodhi4>
    2f6e:	80 5d       	subi	r24, 0xD0	; 208
    2f70:	8a 33       	cpi	r24, 0x3A	; 58
    2f72:	0c f0       	brlt	.+2      	; 0x2f76 <itoa+0x2c>
    2f74:	89 5d       	subi	r24, 0xD9	; 217
    2f76:	81 93       	st	Z+, r24
    2f78:	cb 01       	movw	r24, r22
    2f7a:	00 97       	sbiw	r24, 0x00	; 0
    2f7c:	a1 f7       	brne	.-24     	; 0x2f66 <itoa+0x1c>
    2f7e:	16 f4       	brtc	.+4      	; 0x2f84 <itoa+0x3a>
    2f80:	5d e2       	ldi	r21, 0x2D	; 45
    2f82:	51 93       	st	Z+, r21
    2f84:	10 82       	st	Z, r1
    2f86:	c9 01       	movw	r24, r18
    2f88:	0c 94 ea 19 	jmp	0x33d4	; 0x33d4 <strrev>

00002f8c <snprintf>:
    2f8c:	ae e0       	ldi	r26, 0x0E	; 14
    2f8e:	b0 e0       	ldi	r27, 0x00	; 0
    2f90:	ec ec       	ldi	r30, 0xCC	; 204
    2f92:	f7 e1       	ldi	r31, 0x17	; 23
    2f94:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <__prologue_saves__+0x1c>
    2f98:	0d 89       	ldd	r16, Y+21	; 0x15
    2f9a:	1e 89       	ldd	r17, Y+22	; 0x16
    2f9c:	8f 89       	ldd	r24, Y+23	; 0x17
    2f9e:	98 8d       	ldd	r25, Y+24	; 0x18
    2fa0:	97 ff       	sbrs	r25, 7
    2fa2:	02 c0       	rjmp	.+4      	; 0x2fa8 <snprintf+0x1c>
    2fa4:	80 e0       	ldi	r24, 0x00	; 0
    2fa6:	90 e8       	ldi	r25, 0x80	; 128
    2fa8:	01 97       	sbiw	r24, 0x01	; 1
    2faa:	9e 83       	std	Y+6, r25	; 0x06
    2fac:	8d 83       	std	Y+5, r24	; 0x05
    2fae:	1a 83       	std	Y+2, r17	; 0x02
    2fb0:	09 83       	std	Y+1, r16	; 0x01
    2fb2:	86 e0       	ldi	r24, 0x06	; 6
    2fb4:	8c 83       	std	Y+4, r24	; 0x04
    2fb6:	9e 01       	movw	r18, r28
    2fb8:	25 5e       	subi	r18, 0xE5	; 229
    2fba:	3f 4f       	sbci	r19, 0xFF	; 255
    2fbc:	ce 01       	movw	r24, r28
    2fbe:	01 96       	adiw	r24, 0x01	; 1
    2fc0:	69 8d       	ldd	r22, Y+25	; 0x19
    2fc2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fc4:	a9 01       	movw	r20, r18
    2fc6:	0e 94 f7 17 	call	0x2fee	; 0x2fee <vfprintf>
    2fca:	4d 81       	ldd	r20, Y+5	; 0x05
    2fcc:	5e 81       	ldd	r21, Y+6	; 0x06
    2fce:	57 fd       	sbrc	r21, 7
    2fd0:	0a c0       	rjmp	.+20     	; 0x2fe6 <snprintf+0x5a>
    2fd2:	2f 81       	ldd	r18, Y+7	; 0x07
    2fd4:	38 85       	ldd	r19, Y+8	; 0x08
    2fd6:	42 17       	cp	r20, r18
    2fd8:	53 07       	cpc	r21, r19
    2fda:	0c f4       	brge	.+2      	; 0x2fde <snprintf+0x52>
    2fdc:	9a 01       	movw	r18, r20
    2fde:	02 0f       	add	r16, r18
    2fe0:	13 1f       	adc	r17, r19
    2fe2:	f8 01       	movw	r30, r16
    2fe4:	10 82       	st	Z, r1
    2fe6:	2e 96       	adiw	r28, 0x0e	; 14
    2fe8:	e4 e0       	ldi	r30, 0x04	; 4
    2fea:	0c 94 98 17 	jmp	0x2f30	; 0x2f30 <__epilogue_restores__+0x1c>

00002fee <vfprintf>:
    2fee:	ab e0       	ldi	r26, 0x0B	; 11
    2ff0:	b0 e0       	ldi	r27, 0x00	; 0
    2ff2:	ed ef       	ldi	r30, 0xFD	; 253
    2ff4:	f7 e1       	ldi	r31, 0x17	; 23
    2ff6:	0c 94 6e 17 	jmp	0x2edc	; 0x2edc <__prologue_saves__>
    2ffa:	3c 01       	movw	r6, r24
    2ffc:	2b 01       	movw	r4, r22
    2ffe:	5a 01       	movw	r10, r20
    3000:	fc 01       	movw	r30, r24
    3002:	17 82       	std	Z+7, r1	; 0x07
    3004:	16 82       	std	Z+6, r1	; 0x06
    3006:	83 81       	ldd	r24, Z+3	; 0x03
    3008:	81 fd       	sbrc	r24, 1
    300a:	03 c0       	rjmp	.+6      	; 0x3012 <vfprintf+0x24>
    300c:	6f ef       	ldi	r22, 0xFF	; 255
    300e:	7f ef       	ldi	r23, 0xFF	; 255
    3010:	c6 c1       	rjmp	.+908    	; 0x339e <vfprintf+0x3b0>
    3012:	9a e0       	ldi	r25, 0x0A	; 10
    3014:	89 2e       	mov	r8, r25
    3016:	1e 01       	movw	r2, r28
    3018:	08 94       	sec
    301a:	21 1c       	adc	r2, r1
    301c:	31 1c       	adc	r3, r1
    301e:	f3 01       	movw	r30, r6
    3020:	23 81       	ldd	r18, Z+3	; 0x03
    3022:	f2 01       	movw	r30, r4
    3024:	23 fd       	sbrc	r18, 3
    3026:	85 91       	lpm	r24, Z+
    3028:	23 ff       	sbrs	r18, 3
    302a:	81 91       	ld	r24, Z+
    302c:	2f 01       	movw	r4, r30
    302e:	88 23       	and	r24, r24
    3030:	09 f4       	brne	.+2      	; 0x3034 <vfprintf+0x46>
    3032:	b2 c1       	rjmp	.+868    	; 0x3398 <vfprintf+0x3aa>
    3034:	85 32       	cpi	r24, 0x25	; 37
    3036:	39 f4       	brne	.+14     	; 0x3046 <vfprintf+0x58>
    3038:	23 fd       	sbrc	r18, 3
    303a:	85 91       	lpm	r24, Z+
    303c:	23 ff       	sbrs	r18, 3
    303e:	81 91       	ld	r24, Z+
    3040:	2f 01       	movw	r4, r30
    3042:	85 32       	cpi	r24, 0x25	; 37
    3044:	29 f4       	brne	.+10     	; 0x3050 <vfprintf+0x62>
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	b3 01       	movw	r22, r6
    304a:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <fputc>
    304e:	e7 cf       	rjmp	.-50     	; 0x301e <vfprintf+0x30>
    3050:	98 2f       	mov	r25, r24
    3052:	ff 24       	eor	r15, r15
    3054:	ee 24       	eor	r14, r14
    3056:	99 24       	eor	r9, r9
    3058:	ff e1       	ldi	r31, 0x1F	; 31
    305a:	ff 15       	cp	r31, r15
    305c:	d0 f0       	brcs	.+52     	; 0x3092 <vfprintf+0xa4>
    305e:	9b 32       	cpi	r25, 0x2B	; 43
    3060:	69 f0       	breq	.+26     	; 0x307c <vfprintf+0x8e>
    3062:	9c 32       	cpi	r25, 0x2C	; 44
    3064:	28 f4       	brcc	.+10     	; 0x3070 <vfprintf+0x82>
    3066:	90 32       	cpi	r25, 0x20	; 32
    3068:	59 f0       	breq	.+22     	; 0x3080 <vfprintf+0x92>
    306a:	93 32       	cpi	r25, 0x23	; 35
    306c:	91 f4       	brne	.+36     	; 0x3092 <vfprintf+0xa4>
    306e:	0e c0       	rjmp	.+28     	; 0x308c <vfprintf+0x9e>
    3070:	9d 32       	cpi	r25, 0x2D	; 45
    3072:	49 f0       	breq	.+18     	; 0x3086 <vfprintf+0x98>
    3074:	90 33       	cpi	r25, 0x30	; 48
    3076:	69 f4       	brne	.+26     	; 0x3092 <vfprintf+0xa4>
    3078:	41 e0       	ldi	r20, 0x01	; 1
    307a:	24 c0       	rjmp	.+72     	; 0x30c4 <vfprintf+0xd6>
    307c:	52 e0       	ldi	r21, 0x02	; 2
    307e:	f5 2a       	or	r15, r21
    3080:	84 e0       	ldi	r24, 0x04	; 4
    3082:	f8 2a       	or	r15, r24
    3084:	28 c0       	rjmp	.+80     	; 0x30d6 <vfprintf+0xe8>
    3086:	98 e0       	ldi	r25, 0x08	; 8
    3088:	f9 2a       	or	r15, r25
    308a:	25 c0       	rjmp	.+74     	; 0x30d6 <vfprintf+0xe8>
    308c:	e0 e1       	ldi	r30, 0x10	; 16
    308e:	fe 2a       	or	r15, r30
    3090:	22 c0       	rjmp	.+68     	; 0x30d6 <vfprintf+0xe8>
    3092:	f7 fc       	sbrc	r15, 7
    3094:	29 c0       	rjmp	.+82     	; 0x30e8 <vfprintf+0xfa>
    3096:	89 2f       	mov	r24, r25
    3098:	80 53       	subi	r24, 0x30	; 48
    309a:	8a 30       	cpi	r24, 0x0A	; 10
    309c:	70 f4       	brcc	.+28     	; 0x30ba <vfprintf+0xcc>
    309e:	f6 fe       	sbrs	r15, 6
    30a0:	05 c0       	rjmp	.+10     	; 0x30ac <vfprintf+0xbe>
    30a2:	98 9c       	mul	r9, r8
    30a4:	90 2c       	mov	r9, r0
    30a6:	11 24       	eor	r1, r1
    30a8:	98 0e       	add	r9, r24
    30aa:	15 c0       	rjmp	.+42     	; 0x30d6 <vfprintf+0xe8>
    30ac:	e8 9c       	mul	r14, r8
    30ae:	e0 2c       	mov	r14, r0
    30b0:	11 24       	eor	r1, r1
    30b2:	e8 0e       	add	r14, r24
    30b4:	f0 e2       	ldi	r31, 0x20	; 32
    30b6:	ff 2a       	or	r15, r31
    30b8:	0e c0       	rjmp	.+28     	; 0x30d6 <vfprintf+0xe8>
    30ba:	9e 32       	cpi	r25, 0x2E	; 46
    30bc:	29 f4       	brne	.+10     	; 0x30c8 <vfprintf+0xda>
    30be:	f6 fc       	sbrc	r15, 6
    30c0:	6b c1       	rjmp	.+726    	; 0x3398 <vfprintf+0x3aa>
    30c2:	40 e4       	ldi	r20, 0x40	; 64
    30c4:	f4 2a       	or	r15, r20
    30c6:	07 c0       	rjmp	.+14     	; 0x30d6 <vfprintf+0xe8>
    30c8:	9c 36       	cpi	r25, 0x6C	; 108
    30ca:	19 f4       	brne	.+6      	; 0x30d2 <vfprintf+0xe4>
    30cc:	50 e8       	ldi	r21, 0x80	; 128
    30ce:	f5 2a       	or	r15, r21
    30d0:	02 c0       	rjmp	.+4      	; 0x30d6 <vfprintf+0xe8>
    30d2:	98 36       	cpi	r25, 0x68	; 104
    30d4:	49 f4       	brne	.+18     	; 0x30e8 <vfprintf+0xfa>
    30d6:	f2 01       	movw	r30, r4
    30d8:	23 fd       	sbrc	r18, 3
    30da:	95 91       	lpm	r25, Z+
    30dc:	23 ff       	sbrs	r18, 3
    30de:	91 91       	ld	r25, Z+
    30e0:	2f 01       	movw	r4, r30
    30e2:	99 23       	and	r25, r25
    30e4:	09 f0       	breq	.+2      	; 0x30e8 <vfprintf+0xfa>
    30e6:	b8 cf       	rjmp	.-144    	; 0x3058 <vfprintf+0x6a>
    30e8:	89 2f       	mov	r24, r25
    30ea:	85 54       	subi	r24, 0x45	; 69
    30ec:	83 30       	cpi	r24, 0x03	; 3
    30ee:	18 f0       	brcs	.+6      	; 0x30f6 <vfprintf+0x108>
    30f0:	80 52       	subi	r24, 0x20	; 32
    30f2:	83 30       	cpi	r24, 0x03	; 3
    30f4:	38 f4       	brcc	.+14     	; 0x3104 <vfprintf+0x116>
    30f6:	44 e0       	ldi	r20, 0x04	; 4
    30f8:	50 e0       	ldi	r21, 0x00	; 0
    30fa:	a4 0e       	add	r10, r20
    30fc:	b5 1e       	adc	r11, r21
    30fe:	5f e3       	ldi	r21, 0x3F	; 63
    3100:	59 83       	std	Y+1, r21	; 0x01
    3102:	0f c0       	rjmp	.+30     	; 0x3122 <vfprintf+0x134>
    3104:	93 36       	cpi	r25, 0x63	; 99
    3106:	31 f0       	breq	.+12     	; 0x3114 <vfprintf+0x126>
    3108:	93 37       	cpi	r25, 0x73	; 115
    310a:	79 f0       	breq	.+30     	; 0x312a <vfprintf+0x13c>
    310c:	93 35       	cpi	r25, 0x53	; 83
    310e:	09 f0       	breq	.+2      	; 0x3112 <vfprintf+0x124>
    3110:	56 c0       	rjmp	.+172    	; 0x31be <vfprintf+0x1d0>
    3112:	20 c0       	rjmp	.+64     	; 0x3154 <vfprintf+0x166>
    3114:	f5 01       	movw	r30, r10
    3116:	80 81       	ld	r24, Z
    3118:	89 83       	std	Y+1, r24	; 0x01
    311a:	42 e0       	ldi	r20, 0x02	; 2
    311c:	50 e0       	ldi	r21, 0x00	; 0
    311e:	a4 0e       	add	r10, r20
    3120:	b5 1e       	adc	r11, r21
    3122:	61 01       	movw	r12, r2
    3124:	01 e0       	ldi	r16, 0x01	; 1
    3126:	10 e0       	ldi	r17, 0x00	; 0
    3128:	12 c0       	rjmp	.+36     	; 0x314e <vfprintf+0x160>
    312a:	f5 01       	movw	r30, r10
    312c:	c0 80       	ld	r12, Z
    312e:	d1 80       	ldd	r13, Z+1	; 0x01
    3130:	f6 fc       	sbrc	r15, 6
    3132:	03 c0       	rjmp	.+6      	; 0x313a <vfprintf+0x14c>
    3134:	6f ef       	ldi	r22, 0xFF	; 255
    3136:	7f ef       	ldi	r23, 0xFF	; 255
    3138:	02 c0       	rjmp	.+4      	; 0x313e <vfprintf+0x150>
    313a:	69 2d       	mov	r22, r9
    313c:	70 e0       	ldi	r23, 0x00	; 0
    313e:	42 e0       	ldi	r20, 0x02	; 2
    3140:	50 e0       	ldi	r21, 0x00	; 0
    3142:	a4 0e       	add	r10, r20
    3144:	b5 1e       	adc	r11, r21
    3146:	c6 01       	movw	r24, r12
    3148:	0e 94 df 19 	call	0x33be	; 0x33be <strnlen>
    314c:	8c 01       	movw	r16, r24
    314e:	5f e7       	ldi	r21, 0x7F	; 127
    3150:	f5 22       	and	r15, r21
    3152:	14 c0       	rjmp	.+40     	; 0x317c <vfprintf+0x18e>
    3154:	f5 01       	movw	r30, r10
    3156:	c0 80       	ld	r12, Z
    3158:	d1 80       	ldd	r13, Z+1	; 0x01
    315a:	f6 fc       	sbrc	r15, 6
    315c:	03 c0       	rjmp	.+6      	; 0x3164 <vfprintf+0x176>
    315e:	6f ef       	ldi	r22, 0xFF	; 255
    3160:	7f ef       	ldi	r23, 0xFF	; 255
    3162:	02 c0       	rjmp	.+4      	; 0x3168 <vfprintf+0x17a>
    3164:	69 2d       	mov	r22, r9
    3166:	70 e0       	ldi	r23, 0x00	; 0
    3168:	42 e0       	ldi	r20, 0x02	; 2
    316a:	50 e0       	ldi	r21, 0x00	; 0
    316c:	a4 0e       	add	r10, r20
    316e:	b5 1e       	adc	r11, r21
    3170:	c6 01       	movw	r24, r12
    3172:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <strnlen_P>
    3176:	8c 01       	movw	r16, r24
    3178:	50 e8       	ldi	r21, 0x80	; 128
    317a:	f5 2a       	or	r15, r21
    317c:	f3 fe       	sbrs	r15, 3
    317e:	07 c0       	rjmp	.+14     	; 0x318e <vfprintf+0x1a0>
    3180:	1a c0       	rjmp	.+52     	; 0x31b6 <vfprintf+0x1c8>
    3182:	80 e2       	ldi	r24, 0x20	; 32
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	b3 01       	movw	r22, r6
    3188:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <fputc>
    318c:	ea 94       	dec	r14
    318e:	8e 2d       	mov	r24, r14
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	08 17       	cp	r16, r24
    3194:	19 07       	cpc	r17, r25
    3196:	a8 f3       	brcs	.-22     	; 0x3182 <vfprintf+0x194>
    3198:	0e c0       	rjmp	.+28     	; 0x31b6 <vfprintf+0x1c8>
    319a:	f6 01       	movw	r30, r12
    319c:	f7 fc       	sbrc	r15, 7
    319e:	85 91       	lpm	r24, Z+
    31a0:	f7 fe       	sbrs	r15, 7
    31a2:	81 91       	ld	r24, Z+
    31a4:	6f 01       	movw	r12, r30
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	b3 01       	movw	r22, r6
    31aa:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <fputc>
    31ae:	e1 10       	cpse	r14, r1
    31b0:	ea 94       	dec	r14
    31b2:	01 50       	subi	r16, 0x01	; 1
    31b4:	10 40       	sbci	r17, 0x00	; 0
    31b6:	01 15       	cp	r16, r1
    31b8:	11 05       	cpc	r17, r1
    31ba:	79 f7       	brne	.-34     	; 0x319a <vfprintf+0x1ac>
    31bc:	ea c0       	rjmp	.+468    	; 0x3392 <vfprintf+0x3a4>
    31be:	94 36       	cpi	r25, 0x64	; 100
    31c0:	11 f0       	breq	.+4      	; 0x31c6 <vfprintf+0x1d8>
    31c2:	99 36       	cpi	r25, 0x69	; 105
    31c4:	69 f5       	brne	.+90     	; 0x3220 <vfprintf+0x232>
    31c6:	f7 fe       	sbrs	r15, 7
    31c8:	08 c0       	rjmp	.+16     	; 0x31da <vfprintf+0x1ec>
    31ca:	f5 01       	movw	r30, r10
    31cc:	20 81       	ld	r18, Z
    31ce:	31 81       	ldd	r19, Z+1	; 0x01
    31d0:	42 81       	ldd	r20, Z+2	; 0x02
    31d2:	53 81       	ldd	r21, Z+3	; 0x03
    31d4:	84 e0       	ldi	r24, 0x04	; 4
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	0a c0       	rjmp	.+20     	; 0x31ee <vfprintf+0x200>
    31da:	f5 01       	movw	r30, r10
    31dc:	80 81       	ld	r24, Z
    31de:	91 81       	ldd	r25, Z+1	; 0x01
    31e0:	9c 01       	movw	r18, r24
    31e2:	44 27       	eor	r20, r20
    31e4:	37 fd       	sbrc	r19, 7
    31e6:	40 95       	com	r20
    31e8:	54 2f       	mov	r21, r20
    31ea:	82 e0       	ldi	r24, 0x02	; 2
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	a8 0e       	add	r10, r24
    31f0:	b9 1e       	adc	r11, r25
    31f2:	9f e6       	ldi	r25, 0x6F	; 111
    31f4:	f9 22       	and	r15, r25
    31f6:	57 ff       	sbrs	r21, 7
    31f8:	09 c0       	rjmp	.+18     	; 0x320c <vfprintf+0x21e>
    31fa:	50 95       	com	r21
    31fc:	40 95       	com	r20
    31fe:	30 95       	com	r19
    3200:	21 95       	neg	r18
    3202:	3f 4f       	sbci	r19, 0xFF	; 255
    3204:	4f 4f       	sbci	r20, 0xFF	; 255
    3206:	5f 4f       	sbci	r21, 0xFF	; 255
    3208:	e0 e8       	ldi	r30, 0x80	; 128
    320a:	fe 2a       	or	r15, r30
    320c:	ca 01       	movw	r24, r20
    320e:	b9 01       	movw	r22, r18
    3210:	a1 01       	movw	r20, r2
    3212:	2a e0       	ldi	r18, 0x0A	; 10
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	0e 94 26 1a 	call	0x344c	; 0x344c <__ultoa_invert>
    321a:	d8 2e       	mov	r13, r24
    321c:	d2 18       	sub	r13, r2
    321e:	40 c0       	rjmp	.+128    	; 0x32a0 <vfprintf+0x2b2>
    3220:	95 37       	cpi	r25, 0x75	; 117
    3222:	29 f4       	brne	.+10     	; 0x322e <vfprintf+0x240>
    3224:	1f 2d       	mov	r17, r15
    3226:	1f 7e       	andi	r17, 0xEF	; 239
    3228:	2a e0       	ldi	r18, 0x0A	; 10
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	1d c0       	rjmp	.+58     	; 0x3268 <vfprintf+0x27a>
    322e:	1f 2d       	mov	r17, r15
    3230:	19 7f       	andi	r17, 0xF9	; 249
    3232:	9f 36       	cpi	r25, 0x6F	; 111
    3234:	61 f0       	breq	.+24     	; 0x324e <vfprintf+0x260>
    3236:	90 37       	cpi	r25, 0x70	; 112
    3238:	20 f4       	brcc	.+8      	; 0x3242 <vfprintf+0x254>
    323a:	98 35       	cpi	r25, 0x58	; 88
    323c:	09 f0       	breq	.+2      	; 0x3240 <vfprintf+0x252>
    323e:	ac c0       	rjmp	.+344    	; 0x3398 <vfprintf+0x3aa>
    3240:	0f c0       	rjmp	.+30     	; 0x3260 <vfprintf+0x272>
    3242:	90 37       	cpi	r25, 0x70	; 112
    3244:	39 f0       	breq	.+14     	; 0x3254 <vfprintf+0x266>
    3246:	98 37       	cpi	r25, 0x78	; 120
    3248:	09 f0       	breq	.+2      	; 0x324c <vfprintf+0x25e>
    324a:	a6 c0       	rjmp	.+332    	; 0x3398 <vfprintf+0x3aa>
    324c:	04 c0       	rjmp	.+8      	; 0x3256 <vfprintf+0x268>
    324e:	28 e0       	ldi	r18, 0x08	; 8
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	0a c0       	rjmp	.+20     	; 0x3268 <vfprintf+0x27a>
    3254:	10 61       	ori	r17, 0x10	; 16
    3256:	14 fd       	sbrc	r17, 4
    3258:	14 60       	ori	r17, 0x04	; 4
    325a:	20 e1       	ldi	r18, 0x10	; 16
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	04 c0       	rjmp	.+8      	; 0x3268 <vfprintf+0x27a>
    3260:	14 fd       	sbrc	r17, 4
    3262:	16 60       	ori	r17, 0x06	; 6
    3264:	20 e1       	ldi	r18, 0x10	; 16
    3266:	32 e0       	ldi	r19, 0x02	; 2
    3268:	17 ff       	sbrs	r17, 7
    326a:	08 c0       	rjmp	.+16     	; 0x327c <vfprintf+0x28e>
    326c:	f5 01       	movw	r30, r10
    326e:	60 81       	ld	r22, Z
    3270:	71 81       	ldd	r23, Z+1	; 0x01
    3272:	82 81       	ldd	r24, Z+2	; 0x02
    3274:	93 81       	ldd	r25, Z+3	; 0x03
    3276:	44 e0       	ldi	r20, 0x04	; 4
    3278:	50 e0       	ldi	r21, 0x00	; 0
    327a:	08 c0       	rjmp	.+16     	; 0x328c <vfprintf+0x29e>
    327c:	f5 01       	movw	r30, r10
    327e:	80 81       	ld	r24, Z
    3280:	91 81       	ldd	r25, Z+1	; 0x01
    3282:	bc 01       	movw	r22, r24
    3284:	80 e0       	ldi	r24, 0x00	; 0
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	42 e0       	ldi	r20, 0x02	; 2
    328a:	50 e0       	ldi	r21, 0x00	; 0
    328c:	a4 0e       	add	r10, r20
    328e:	b5 1e       	adc	r11, r21
    3290:	a1 01       	movw	r20, r2
    3292:	0e 94 26 1a 	call	0x344c	; 0x344c <__ultoa_invert>
    3296:	d8 2e       	mov	r13, r24
    3298:	d2 18       	sub	r13, r2
    329a:	8f e7       	ldi	r24, 0x7F	; 127
    329c:	f8 2e       	mov	r15, r24
    329e:	f1 22       	and	r15, r17
    32a0:	f6 fe       	sbrs	r15, 6
    32a2:	0b c0       	rjmp	.+22     	; 0x32ba <vfprintf+0x2cc>
    32a4:	5e ef       	ldi	r21, 0xFE	; 254
    32a6:	f5 22       	and	r15, r21
    32a8:	d9 14       	cp	r13, r9
    32aa:	38 f4       	brcc	.+14     	; 0x32ba <vfprintf+0x2cc>
    32ac:	f4 fe       	sbrs	r15, 4
    32ae:	07 c0       	rjmp	.+14     	; 0x32be <vfprintf+0x2d0>
    32b0:	f2 fc       	sbrc	r15, 2
    32b2:	05 c0       	rjmp	.+10     	; 0x32be <vfprintf+0x2d0>
    32b4:	8f ee       	ldi	r24, 0xEF	; 239
    32b6:	f8 22       	and	r15, r24
    32b8:	02 c0       	rjmp	.+4      	; 0x32be <vfprintf+0x2d0>
    32ba:	1d 2d       	mov	r17, r13
    32bc:	01 c0       	rjmp	.+2      	; 0x32c0 <vfprintf+0x2d2>
    32be:	19 2d       	mov	r17, r9
    32c0:	f4 fe       	sbrs	r15, 4
    32c2:	0d c0       	rjmp	.+26     	; 0x32de <vfprintf+0x2f0>
    32c4:	fe 01       	movw	r30, r28
    32c6:	ed 0d       	add	r30, r13
    32c8:	f1 1d       	adc	r31, r1
    32ca:	80 81       	ld	r24, Z
    32cc:	80 33       	cpi	r24, 0x30	; 48
    32ce:	19 f4       	brne	.+6      	; 0x32d6 <vfprintf+0x2e8>
    32d0:	99 ee       	ldi	r25, 0xE9	; 233
    32d2:	f9 22       	and	r15, r25
    32d4:	08 c0       	rjmp	.+16     	; 0x32e6 <vfprintf+0x2f8>
    32d6:	1f 5f       	subi	r17, 0xFF	; 255
    32d8:	f2 fe       	sbrs	r15, 2
    32da:	05 c0       	rjmp	.+10     	; 0x32e6 <vfprintf+0x2f8>
    32dc:	03 c0       	rjmp	.+6      	; 0x32e4 <vfprintf+0x2f6>
    32de:	8f 2d       	mov	r24, r15
    32e0:	86 78       	andi	r24, 0x86	; 134
    32e2:	09 f0       	breq	.+2      	; 0x32e6 <vfprintf+0x2f8>
    32e4:	1f 5f       	subi	r17, 0xFF	; 255
    32e6:	0f 2d       	mov	r16, r15
    32e8:	f3 fc       	sbrc	r15, 3
    32ea:	14 c0       	rjmp	.+40     	; 0x3314 <vfprintf+0x326>
    32ec:	f0 fe       	sbrs	r15, 0
    32ee:	0f c0       	rjmp	.+30     	; 0x330e <vfprintf+0x320>
    32f0:	1e 15       	cp	r17, r14
    32f2:	10 f0       	brcs	.+4      	; 0x32f8 <vfprintf+0x30a>
    32f4:	9d 2c       	mov	r9, r13
    32f6:	0b c0       	rjmp	.+22     	; 0x330e <vfprintf+0x320>
    32f8:	9d 2c       	mov	r9, r13
    32fa:	9e 0c       	add	r9, r14
    32fc:	91 1a       	sub	r9, r17
    32fe:	1e 2d       	mov	r17, r14
    3300:	06 c0       	rjmp	.+12     	; 0x330e <vfprintf+0x320>
    3302:	80 e2       	ldi	r24, 0x20	; 32
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	b3 01       	movw	r22, r6
    3308:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <fputc>
    330c:	1f 5f       	subi	r17, 0xFF	; 255
    330e:	1e 15       	cp	r17, r14
    3310:	c0 f3       	brcs	.-16     	; 0x3302 <vfprintf+0x314>
    3312:	04 c0       	rjmp	.+8      	; 0x331c <vfprintf+0x32e>
    3314:	1e 15       	cp	r17, r14
    3316:	10 f4       	brcc	.+4      	; 0x331c <vfprintf+0x32e>
    3318:	e1 1a       	sub	r14, r17
    331a:	01 c0       	rjmp	.+2      	; 0x331e <vfprintf+0x330>
    331c:	ee 24       	eor	r14, r14
    331e:	04 ff       	sbrs	r16, 4
    3320:	0f c0       	rjmp	.+30     	; 0x3340 <vfprintf+0x352>
    3322:	80 e3       	ldi	r24, 0x30	; 48
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	b3 01       	movw	r22, r6
    3328:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <fputc>
    332c:	02 ff       	sbrs	r16, 2
    332e:	1d c0       	rjmp	.+58     	; 0x336a <vfprintf+0x37c>
    3330:	01 fd       	sbrc	r16, 1
    3332:	03 c0       	rjmp	.+6      	; 0x333a <vfprintf+0x34c>
    3334:	88 e7       	ldi	r24, 0x78	; 120
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	0e c0       	rjmp	.+28     	; 0x3356 <vfprintf+0x368>
    333a:	88 e5       	ldi	r24, 0x58	; 88
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	0b c0       	rjmp	.+22     	; 0x3356 <vfprintf+0x368>
    3340:	80 2f       	mov	r24, r16
    3342:	86 78       	andi	r24, 0x86	; 134
    3344:	91 f0       	breq	.+36     	; 0x336a <vfprintf+0x37c>
    3346:	01 ff       	sbrs	r16, 1
    3348:	02 c0       	rjmp	.+4      	; 0x334e <vfprintf+0x360>
    334a:	8b e2       	ldi	r24, 0x2B	; 43
    334c:	01 c0       	rjmp	.+2      	; 0x3350 <vfprintf+0x362>
    334e:	80 e2       	ldi	r24, 0x20	; 32
    3350:	f7 fc       	sbrc	r15, 7
    3352:	8d e2       	ldi	r24, 0x2D	; 45
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	b3 01       	movw	r22, r6
    3358:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <fputc>
    335c:	06 c0       	rjmp	.+12     	; 0x336a <vfprintf+0x37c>
    335e:	80 e3       	ldi	r24, 0x30	; 48
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	b3 01       	movw	r22, r6
    3364:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <fputc>
    3368:	9a 94       	dec	r9
    336a:	d9 14       	cp	r13, r9
    336c:	c0 f3       	brcs	.-16     	; 0x335e <vfprintf+0x370>
    336e:	da 94       	dec	r13
    3370:	f1 01       	movw	r30, r2
    3372:	ed 0d       	add	r30, r13
    3374:	f1 1d       	adc	r31, r1
    3376:	80 81       	ld	r24, Z
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	b3 01       	movw	r22, r6
    337c:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <fputc>
    3380:	dd 20       	and	r13, r13
    3382:	a9 f7       	brne	.-22     	; 0x336e <vfprintf+0x380>
    3384:	06 c0       	rjmp	.+12     	; 0x3392 <vfprintf+0x3a4>
    3386:	80 e2       	ldi	r24, 0x20	; 32
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	b3 01       	movw	r22, r6
    338c:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <fputc>
    3390:	ea 94       	dec	r14
    3392:	ee 20       	and	r14, r14
    3394:	c1 f7       	brne	.-16     	; 0x3386 <vfprintf+0x398>
    3396:	43 ce       	rjmp	.-890    	; 0x301e <vfprintf+0x30>
    3398:	f3 01       	movw	r30, r6
    339a:	66 81       	ldd	r22, Z+6	; 0x06
    339c:	77 81       	ldd	r23, Z+7	; 0x07
    339e:	cb 01       	movw	r24, r22
    33a0:	2b 96       	adiw	r28, 0x0b	; 11
    33a2:	e2 e1       	ldi	r30, 0x12	; 18
    33a4:	0c 94 8a 17 	jmp	0x2f14	; 0x2f14 <__epilogue_restores__>

000033a8 <strnlen_P>:
    33a8:	fc 01       	movw	r30, r24
    33aa:	05 90       	lpm	r0, Z+
    33ac:	61 50       	subi	r22, 0x01	; 1
    33ae:	70 40       	sbci	r23, 0x00	; 0
    33b0:	01 10       	cpse	r0, r1
    33b2:	d8 f7       	brcc	.-10     	; 0x33aa <strnlen_P+0x2>
    33b4:	80 95       	com	r24
    33b6:	90 95       	com	r25
    33b8:	8e 0f       	add	r24, r30
    33ba:	9f 1f       	adc	r25, r31
    33bc:	08 95       	ret

000033be <strnlen>:
    33be:	fc 01       	movw	r30, r24
    33c0:	61 50       	subi	r22, 0x01	; 1
    33c2:	70 40       	sbci	r23, 0x00	; 0
    33c4:	01 90       	ld	r0, Z+
    33c6:	01 10       	cpse	r0, r1
    33c8:	d8 f7       	brcc	.-10     	; 0x33c0 <strnlen+0x2>
    33ca:	80 95       	com	r24
    33cc:	90 95       	com	r25
    33ce:	8e 0f       	add	r24, r30
    33d0:	9f 1f       	adc	r25, r31
    33d2:	08 95       	ret

000033d4 <strrev>:
    33d4:	dc 01       	movw	r26, r24
    33d6:	fc 01       	movw	r30, r24
    33d8:	67 2f       	mov	r22, r23
    33da:	71 91       	ld	r23, Z+
    33dc:	77 23       	and	r23, r23
    33de:	e1 f7       	brne	.-8      	; 0x33d8 <strrev+0x4>
    33e0:	32 97       	sbiw	r30, 0x02	; 2
    33e2:	04 c0       	rjmp	.+8      	; 0x33ec <strrev+0x18>
    33e4:	7c 91       	ld	r23, X
    33e6:	6d 93       	st	X+, r22
    33e8:	70 83       	st	Z, r23
    33ea:	62 91       	ld	r22, -Z
    33ec:	ae 17       	cp	r26, r30
    33ee:	bf 07       	cpc	r27, r31
    33f0:	c8 f3       	brcs	.-14     	; 0x33e4 <strrev+0x10>
    33f2:	08 95       	ret

000033f4 <fputc>:
    33f4:	0f 93       	push	r16
    33f6:	1f 93       	push	r17
    33f8:	cf 93       	push	r28
    33fa:	df 93       	push	r29
    33fc:	8c 01       	movw	r16, r24
    33fe:	eb 01       	movw	r28, r22
    3400:	8b 81       	ldd	r24, Y+3	; 0x03
    3402:	81 ff       	sbrs	r24, 1
    3404:	1b c0       	rjmp	.+54     	; 0x343c <fputc+0x48>
    3406:	82 ff       	sbrs	r24, 2
    3408:	0d c0       	rjmp	.+26     	; 0x3424 <fputc+0x30>
    340a:	2e 81       	ldd	r18, Y+6	; 0x06
    340c:	3f 81       	ldd	r19, Y+7	; 0x07
    340e:	8c 81       	ldd	r24, Y+4	; 0x04
    3410:	9d 81       	ldd	r25, Y+5	; 0x05
    3412:	28 17       	cp	r18, r24
    3414:	39 07       	cpc	r19, r25
    3416:	64 f4       	brge	.+24     	; 0x3430 <fputc+0x3c>
    3418:	e8 81       	ld	r30, Y
    341a:	f9 81       	ldd	r31, Y+1	; 0x01
    341c:	01 93       	st	Z+, r16
    341e:	f9 83       	std	Y+1, r31	; 0x01
    3420:	e8 83       	st	Y, r30
    3422:	06 c0       	rjmp	.+12     	; 0x3430 <fputc+0x3c>
    3424:	e8 85       	ldd	r30, Y+8	; 0x08
    3426:	f9 85       	ldd	r31, Y+9	; 0x09
    3428:	80 2f       	mov	r24, r16
    342a:	09 95       	icall
    342c:	89 2b       	or	r24, r25
    342e:	31 f4       	brne	.+12     	; 0x343c <fputc+0x48>
    3430:	8e 81       	ldd	r24, Y+6	; 0x06
    3432:	9f 81       	ldd	r25, Y+7	; 0x07
    3434:	01 96       	adiw	r24, 0x01	; 1
    3436:	9f 83       	std	Y+7, r25	; 0x07
    3438:	8e 83       	std	Y+6, r24	; 0x06
    343a:	02 c0       	rjmp	.+4      	; 0x3440 <fputc+0x4c>
    343c:	0f ef       	ldi	r16, 0xFF	; 255
    343e:	1f ef       	ldi	r17, 0xFF	; 255
    3440:	c8 01       	movw	r24, r16
    3442:	df 91       	pop	r29
    3444:	cf 91       	pop	r28
    3446:	1f 91       	pop	r17
    3448:	0f 91       	pop	r16
    344a:	08 95       	ret

0000344c <__ultoa_invert>:
    344c:	fa 01       	movw	r30, r20
    344e:	aa 27       	eor	r26, r26
    3450:	28 30       	cpi	r18, 0x08	; 8
    3452:	51 f1       	breq	.+84     	; 0x34a8 <__ultoa_invert+0x5c>
    3454:	20 31       	cpi	r18, 0x10	; 16
    3456:	81 f1       	breq	.+96     	; 0x34b8 <__ultoa_invert+0x6c>
    3458:	e8 94       	clt
    345a:	6f 93       	push	r22
    345c:	6e 7f       	andi	r22, 0xFE	; 254
    345e:	6e 5f       	subi	r22, 0xFE	; 254
    3460:	7f 4f       	sbci	r23, 0xFF	; 255
    3462:	8f 4f       	sbci	r24, 0xFF	; 255
    3464:	9f 4f       	sbci	r25, 0xFF	; 255
    3466:	af 4f       	sbci	r26, 0xFF	; 255
    3468:	b1 e0       	ldi	r27, 0x01	; 1
    346a:	3e d0       	rcall	.+124    	; 0x34e8 <__ultoa_invert+0x9c>
    346c:	b4 e0       	ldi	r27, 0x04	; 4
    346e:	3c d0       	rcall	.+120    	; 0x34e8 <__ultoa_invert+0x9c>
    3470:	67 0f       	add	r22, r23
    3472:	78 1f       	adc	r23, r24
    3474:	89 1f       	adc	r24, r25
    3476:	9a 1f       	adc	r25, r26
    3478:	a1 1d       	adc	r26, r1
    347a:	68 0f       	add	r22, r24
    347c:	79 1f       	adc	r23, r25
    347e:	8a 1f       	adc	r24, r26
    3480:	91 1d       	adc	r25, r1
    3482:	a1 1d       	adc	r26, r1
    3484:	6a 0f       	add	r22, r26
    3486:	71 1d       	adc	r23, r1
    3488:	81 1d       	adc	r24, r1
    348a:	91 1d       	adc	r25, r1
    348c:	a1 1d       	adc	r26, r1
    348e:	20 d0       	rcall	.+64     	; 0x34d0 <__ultoa_invert+0x84>
    3490:	09 f4       	brne	.+2      	; 0x3494 <__ultoa_invert+0x48>
    3492:	68 94       	set
    3494:	3f 91       	pop	r19
    3496:	2a e0       	ldi	r18, 0x0A	; 10
    3498:	26 9f       	mul	r18, r22
    349a:	11 24       	eor	r1, r1
    349c:	30 19       	sub	r19, r0
    349e:	30 5d       	subi	r19, 0xD0	; 208
    34a0:	31 93       	st	Z+, r19
    34a2:	de f6       	brtc	.-74     	; 0x345a <__ultoa_invert+0xe>
    34a4:	cf 01       	movw	r24, r30
    34a6:	08 95       	ret
    34a8:	46 2f       	mov	r20, r22
    34aa:	47 70       	andi	r20, 0x07	; 7
    34ac:	40 5d       	subi	r20, 0xD0	; 208
    34ae:	41 93       	st	Z+, r20
    34b0:	b3 e0       	ldi	r27, 0x03	; 3
    34b2:	0f d0       	rcall	.+30     	; 0x34d2 <__ultoa_invert+0x86>
    34b4:	c9 f7       	brne	.-14     	; 0x34a8 <__ultoa_invert+0x5c>
    34b6:	f6 cf       	rjmp	.-20     	; 0x34a4 <__ultoa_invert+0x58>
    34b8:	46 2f       	mov	r20, r22
    34ba:	4f 70       	andi	r20, 0x0F	; 15
    34bc:	40 5d       	subi	r20, 0xD0	; 208
    34be:	4a 33       	cpi	r20, 0x3A	; 58
    34c0:	18 f0       	brcs	.+6      	; 0x34c8 <__ultoa_invert+0x7c>
    34c2:	49 5d       	subi	r20, 0xD9	; 217
    34c4:	31 fd       	sbrc	r19, 1
    34c6:	40 52       	subi	r20, 0x20	; 32
    34c8:	41 93       	st	Z+, r20
    34ca:	02 d0       	rcall	.+4      	; 0x34d0 <__ultoa_invert+0x84>
    34cc:	a9 f7       	brne	.-22     	; 0x34b8 <__ultoa_invert+0x6c>
    34ce:	ea cf       	rjmp	.-44     	; 0x34a4 <__ultoa_invert+0x58>
    34d0:	b4 e0       	ldi	r27, 0x04	; 4
    34d2:	a6 95       	lsr	r26
    34d4:	97 95       	ror	r25
    34d6:	87 95       	ror	r24
    34d8:	77 95       	ror	r23
    34da:	67 95       	ror	r22
    34dc:	ba 95       	dec	r27
    34de:	c9 f7       	brne	.-14     	; 0x34d2 <__ultoa_invert+0x86>
    34e0:	00 97       	sbiw	r24, 0x00	; 0
    34e2:	61 05       	cpc	r22, r1
    34e4:	71 05       	cpc	r23, r1
    34e6:	08 95       	ret
    34e8:	9b 01       	movw	r18, r22
    34ea:	ac 01       	movw	r20, r24
    34ec:	0a 2e       	mov	r0, r26
    34ee:	06 94       	lsr	r0
    34f0:	57 95       	ror	r21
    34f2:	47 95       	ror	r20
    34f4:	37 95       	ror	r19
    34f6:	27 95       	ror	r18
    34f8:	ba 95       	dec	r27
    34fa:	c9 f7       	brne	.-14     	; 0x34ee <__ultoa_invert+0xa2>
    34fc:	62 0f       	add	r22, r18
    34fe:	73 1f       	adc	r23, r19
    3500:	84 1f       	adc	r24, r20
    3502:	95 1f       	adc	r25, r21
    3504:	a0 1d       	adc	r26, r0
    3506:	08 95       	ret

00003508 <_exit>:
    3508:	f8 94       	cli

0000350a <__stop_program>:
    350a:	ff cf       	rjmp	.-2      	; 0x350a <__stop_program>
